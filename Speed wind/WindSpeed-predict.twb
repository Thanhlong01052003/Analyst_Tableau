<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20241.24.0308.0326                               -->
<workbook original-version='18.1' source-build='2024.1.1 (20241.24.0308.0326)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.PatternedLineMarks.true...PatternedLineMarks />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='month' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='1.0'>
        <calculation class='tableau' formula='1.0' />
      </column>
      <column caption='IND.1' datatype='real' name='[Parameter 2]' param-domain-type='any' role='measure' type='quantitative' value='0.'>
        <calculation class='tableau' formula='0.' />
      </column>
      <column caption='IND' datatype='real' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='0.'>
        <calculation class='tableau' formula='0.' />
      </column>
      <column caption='IND.2' datatype='real' name='[Parameter 4]' param-domain-type='any' role='measure' type='quantitative' value='1.'>
        <calculation class='tableau' formula='1.' />
      </column>
      <column caption='RAIN' datatype='real' name='[Parameter 5]' param-domain-type='any' role='measure' type='quantitative' value='10.4'>
        <calculation class='tableau' formula='10.4' />
      </column>
      <column caption='T.MAX' datatype='real' name='[Parameter 6]' param-domain-type='any' role='measure' type='quantitative' value='7.2'>
        <calculation class='tableau' formula='7.2' />
      </column>
      <column caption='T.MIN' datatype='real' name='[Parameter 7]' param-domain-type='any' role='measure' type='quantitative' value='-1.5'>
        <calculation class='tableau' formula='-1.5' />
      </column>
      <column caption='T.MIN.G' datatype='real' name='[Parameter 8]' param-domain-type='any' role='measure' type='quantitative' value='-7.5'>
        <calculation class='tableau' formula='-7.5' />
      </column>
    </datasource>
    <datasource caption='wind-data' inline='true' name='federated.0fs9obo1vdsctv1erfeqp12wfdiv' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='wind-data' name='textscan.0m4rssi1pppyts0zwo4020msc9us'>
            <connection class='textscan' directory='D:/HKII_2023-2024/Big_Data_Analyst/Do_an/Nhom8_Tableau/Speed wind' filename='wind-data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0m4rssi1pppyts0zwo4020msc9us' name='wind-data.csv' table='[wind-data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='real' name='WIND' ordinal='0' />
            <column datatype='integer' name='IND' ordinal='1' />
            <column datatype='real' name='RAIN' ordinal='2' />
            <column datatype='integer' name='IND.1' ordinal='3' />
            <column datatype='real' name='T.MAX' ordinal='4' />
            <column datatype='integer' name='IND.2' ordinal='5' />
            <column datatype='real' name='T.MIN' ordinal='6' />
            <column datatype='real' name='T.MIN.G' ordinal='7' />
            <column datatype='integer' name='Year' ordinal='8' />
            <column datatype='integer' name='month' ordinal='9' />
            <column datatype='integer' name='day' ordinal='10' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.0m4rssi1pppyts0zwo4020msc9us' name='wind-data.csv' table='[wind-data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='real' name='WIND' ordinal='0' />
            <column datatype='integer' name='IND' ordinal='1' />
            <column datatype='real' name='RAIN' ordinal='2' />
            <column datatype='integer' name='IND.1' ordinal='3' />
            <column datatype='real' name='T.MAX' ordinal='4' />
            <column datatype='integer' name='IND.2' ordinal='5' />
            <column datatype='real' name='T.MIN' ordinal='6' />
            <column datatype='real' name='T.MIN.G' ordinal='7' />
            <column datatype='integer' name='Year' ordinal='8' />
            <column datatype='integer' name='month' ordinal='9' />
            <column datatype='integer' name='day' ordinal='10' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>WIND</remote-name>
            <remote-type>5</remote-type>
            <local-name>[WIND]</local-name>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias>WIND</remote-alias>
            <ordinal>0</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IND</remote-name>
            <remote-type>20</remote-type>
            <local-name>[IND]</local-name>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias>IND</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RAIN</remote-name>
            <remote-type>5</remote-type>
            <local-name>[RAIN]</local-name>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias>RAIN</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IND.1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[IND.1]</local-name>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias>IND.1</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>T.MAX</remote-name>
            <remote-type>5</remote-type>
            <local-name>[T.MAX]</local-name>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias>T.MAX</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IND.2</remote-name>
            <remote-type>20</remote-type>
            <local-name>[IND.2]</local-name>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias>IND.2</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>T.MIN</remote-name>
            <remote-type>5</remote-type>
            <local-name>[T.MIN]</local-name>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias>T.MIN</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>T.MIN.G</remote-name>
            <remote-type>5</remote-type>
            <local-name>[T.MIN.G]</local-name>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias>T.MIN.G</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>20</remote-type>
            <local-name>[month]</local-name>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>day</remote-name>
            <remote-type>20</remote-type>
            <local-name>[day]</local-name>
            <parent-name>[wind-data.csv]</parent-name>
            <remote-alias>day</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='month name' datatype='string' name='[Calculation_1136877448974712832]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if [month] == 1&#13;&#10;then &apos;Jan&apos;&#13;&#10;ELSEIF  [month] ==2&#13;&#10;then  &apos;Feb&apos;&#13;&#10;ELSEIF  [month] ==3&#13;&#10;then  &apos;March&apos;&#13;&#10;ELSEIF  [month] ==4&#13;&#10;then  &apos;April&apos;&#13;&#10;ELSEIF  [month] ==5&#13;&#10;then  &apos;May&apos;&#13;&#10;ELSEIF  [month] ==6&#13;&#10;then  &apos;June&apos;&#13;&#10;ELSEIF  [month] ==7&#13;&#10;then  &apos;July&apos;&#13;&#10;ELSEIF  [month] == 8&#13;&#10;then  &apos;Aug&apos;&#13;&#10;ELSEIF  [month] ==9&#13;&#10;then  &apos;Sep&apos;&#13;&#10;ELSEIF  [month] == 10&#13;&#10;then  &apos;Oct&apos;&#13;&#10;ELSEIF  [month] ==11&#13;&#10;then  &apos;Nov&apos;&#13;&#10;ELSE &apos;Dec&apos;&#13;&#10;END' />
      </column>
      <column caption='Ind.1' datatype='integer' name='[IND.1]' role='measure' type='quantitative' />
      <column caption='Ind.2' datatype='integer' name='[IND.2]' role='measure' type='quantitative' />
      <column caption='Rain' datatype='real' name='[RAIN]' role='measure' type='quantitative' />
      <column caption='T.Max' datatype='real' name='[T.MAX]' role='measure' type='quantitative' />
      <column caption='T.Min.G' datatype='real' name='[T.MIN.G]' role='measure' type='quantitative' />
      <column caption='T.Min' datatype='real' name='[T.MIN]' role='measure' type='quantitative' />
      <column caption='Wind' datatype='real' name='[WIND]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='wind-data.csv' datatype='table' name='[__tableau_internal_object_id__].[wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642]' role='measure' type='quantitative' />
      <column caption='Day' datatype='integer' name='[day]' role='dimension' type='quantitative' />
      <column caption='Month' datatype='integer' name='[month]' role='dimension' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Viet Nam&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='wind-data.csv' id='wind-data.csv_D775E06C83FD4C3AAFB273A9F03EB642'>
            <properties context=''>
              <relation connection='textscan.0m4rssi1pppyts0zwo4020msc9us' name='wind-data.csv' table='[wind-data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='real' name='WIND' ordinal='0' />
                  <column datatype='integer' name='IND' ordinal='1' />
                  <column datatype='real' name='RAIN' ordinal='2' />
                  <column datatype='integer' name='IND.1' ordinal='3' />
                  <column datatype='real' name='T.MAX' ordinal='4' />
                  <column datatype='integer' name='IND.2' ordinal='5' />
                  <column datatype='real' name='T.MIN' ordinal='6' />
                  <column datatype='real' name='T.MIN.G' ordinal='7' />
                  <column datatype='integer' name='Year' ordinal='8' />
                  <column datatype='integer' name='month' ordinal='9' />
                  <column datatype='integer' name='day' ordinal='10' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='wind_dataset_train' inline='true' name='federated.1fvnhnl0949twh147waw100ixk2h' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='wind_dataset_train' name='textscan.0z1y7cm0deig461ekr7wj0cb47cy'>
            <connection class='textscan' directory='D:/HKII_2023-2024/Big_Data_Analyst/Do_an/Nhom8_Tableau/Speed wind' filename='wind_dataset_train.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0z1y7cm0deig461ekr7wj0cb47cy' name='wind_dataset_train.csv' table='[wind_dataset_train#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='WIND' ordinal='0' />
            <column datatype='string' name='IND' ordinal='1' />
            <column datatype='string' name='RAIN' ordinal='2' />
            <column datatype='string' name='IND.1' ordinal='3' />
            <column datatype='string' name='T.MAX' ordinal='4' />
            <column datatype='string' name='IND.2' ordinal='5' />
            <column datatype='string' name='T.MIN' ordinal='6' />
            <column datatype='string' name='T.MIN.G' ordinal='7' />
            <column datatype='string' name='Year' ordinal='8' />
            <column datatype='string' name='month' ordinal='9' />
            <column datatype='string' name='day' ordinal='10' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.0z1y7cm0deig461ekr7wj0cb47cy' name='wind_dataset_train.csv' table='[wind_dataset_train#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='WIND' ordinal='0' />
            <column datatype='string' name='IND' ordinal='1' />
            <column datatype='string' name='RAIN' ordinal='2' />
            <column datatype='string' name='IND.1' ordinal='3' />
            <column datatype='string' name='T.MAX' ordinal='4' />
            <column datatype='string' name='IND.2' ordinal='5' />
            <column datatype='string' name='T.MIN' ordinal='6' />
            <column datatype='string' name='T.MIN.G' ordinal='7' />
            <column datatype='string' name='Year' ordinal='8' />
            <column datatype='string' name='month' ordinal='9' />
            <column datatype='string' name='day' ordinal='10' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>WIND</remote-name>
            <remote-type>129</remote-type>
            <local-name>[WIND]</local-name>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias>WIND</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IND</remote-name>
            <remote-type>129</remote-type>
            <local-name>[IND]</local-name>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias>IND</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RAIN</remote-name>
            <remote-type>129</remote-type>
            <local-name>[RAIN]</local-name>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias>RAIN</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IND.1</remote-name>
            <remote-type>129</remote-type>
            <local-name>[IND.1]</local-name>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias>IND.1</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>T.MAX</remote-name>
            <remote-type>129</remote-type>
            <local-name>[T.MAX]</local-name>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias>T.MAX</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IND.2</remote-name>
            <remote-type>129</remote-type>
            <local-name>[IND.2]</local-name>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias>IND.2</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>T.MIN</remote-name>
            <remote-type>129</remote-type>
            <local-name>[T.MIN]</local-name>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias>T.MIN</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>T.MIN.G</remote-name>
            <remote-type>129</remote-type>
            <local-name>[T.MIN.G]</local-name>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias>T.MIN.G</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>129</remote-type>
            <local-name>[month]</local-name>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>day</remote-name>
            <remote-type>129</remote-type>
            <local-name>[day]</local-name>
            <parent-name>[wind_dataset_train.csv]</parent-name>
            <remote-alias>day</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Linear Regression' datatype='real' name='[Calculation_1136877448975245313]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.linear_model import LinearRegression&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;lr = LinearRegression()&#13;&#10;lr.fit(X, y)&#13;&#10;&#13;&#10;# Assuming there&apos;s only one additional input for prediction&#13;&#10;inp_list = [_arg10[0], _arg11[0], _arg12[0], _arg13[0], _arg14[0], _arg15[0], _arg16[0], _arg17[0]]&#13;&#10;&#13;&#10;a = np.array(inp_list).reshape(1, -1)&#13;&#10;out = lr.predict(a)  # Use dt.predict for regression, not dt.predict_proba&#13;&#10;prediction = out[0]  # Access the predicted wind speed&#13;&#10;&#13;&#10;return prediction&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='MAE LR' datatype='real' name='[Calculation_1136877448975355906]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.linear_model import LinearRegression&#13;&#10;from sklearn import metrics&#13;&#10;from sklearn.model_selection import train_test_split&#13;&#10;&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split the data into training and testing sets (80% train, 20% test)&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Train the model&#13;&#10;lr = LinearRegression()&#13;&#10;lr.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Make predictions on the test set&#13;&#10;predict = lr.predict(X_test)&#13;&#10;&#13;&#10;# Calculate evaluation metrics&#13;&#10;mae = metrics.mean_absolute_error(y_test, predict)&#13;&#10;mse = metrics.mean_squared_error(y_test, predict)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;return mae&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='MAE Tree' datatype='real' name='[Calculation_1136877448975462403]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.tree import DecisionTreeRegressor&#13;&#10;from sklearn.model_selection import GridSearchCV, train_test_split&#13;&#10;from sklearn.metrics import mean_absolute_error, mean_squared_error&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split data into training and testing sets&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Define parameter grid for GridSearchCV&#13;&#10;param_grid = {&#13;&#10;    &apos;max_depth&apos;: [3, 5, 7, 10],&#13;&#10;    &apos;min_samples_split&apos;: [2, 5, 10],&#13;&#10;    &apos;min_samples_leaf&apos;: [1, 2, 5, 10]&#13;&#10;}&#13;&#10;&#13;&#10;# Initialize and train Decision Tree Regressor with GridSearchCV&#13;&#10;dt = DecisionTreeRegressor()&#13;&#10;grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, cv=5, n_jobs=-1, scoring=&apos;neg_mean_squared_error&apos;)&#13;&#10;grid_search.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Get the best estimator from GridSearchCV&#13;&#10;best_dt = grid_search.best_estimator_&#13;&#10;&#13;&#10;# Predict on the test set&#13;&#10;y_pred = best_dt.predict(X_test)&#13;&#10;&#13;&#10;# Calculate MAE, MSE, RMSE&#13;&#10;mae = mean_absolute_error(y_test, y_pred)&#13;&#10;mse = mean_squared_error(y_test, y_pred)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;# Assuming there&apos;s only one additional input for prediction&#13;&#10;inp_list = [&#13;&#10;    _arg10[0], _arg11[0], _arg12[0], _arg13[0],&#13;&#10;    _arg14[0], _arg15[0], _arg16[0], _arg17[0]&#13;&#10;]&#13;&#10;a = np.array(inp_list).reshape(1, -1)&#13;&#10;out = best_dt.predict(a)  # Use best_dt.predict for regression, not dt.predict_proba&#13;&#10;prediction = out[0]  # Access the predicted wind speed&#13;&#10;&#13;&#10;# Return the prediction and the error metrics&#13;&#10;return mae&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='MSE LR' datatype='real' name='[Calculation_1136877448975568900]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.linear_model import LinearRegression&#13;&#10;from sklearn import metrics&#13;&#10;from sklearn.model_selection import train_test_split&#13;&#10;&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split the data into training and testing sets (80% train, 20% test)&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Train the model&#13;&#10;lr = LinearRegression()&#13;&#10;lr.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Make predictions on the test set&#13;&#10;predict = lr.predict(X_test)&#13;&#10;&#13;&#10;# Calculate evaluation metrics&#13;&#10;mae = metrics.mean_absolute_error(y_test, predict)&#13;&#10;mse = metrics.mean_squared_error(y_test, predict)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;return mse&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='MSE Tree' datatype='real' name='[Calculation_1136877448975650821]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.tree import DecisionTreeRegressor&#13;&#10;from sklearn.model_selection import GridSearchCV, train_test_split&#13;&#10;from sklearn.metrics import mean_absolute_error, mean_squared_error&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split data into training and testing sets&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Define parameter grid for GridSearchCV&#13;&#10;param_grid = {&#13;&#10;    &apos;max_depth&apos;: [3, 5, 7, 10],&#13;&#10;    &apos;min_samples_split&apos;: [2, 5, 10],&#13;&#10;    &apos;min_samples_leaf&apos;: [1, 2, 5, 10]&#13;&#10;}&#13;&#10;&#13;&#10;# Initialize and train Decision Tree Regressor with GridSearchCV&#13;&#10;dt = DecisionTreeRegressor()&#13;&#10;grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, cv=5, n_jobs=-1, scoring=&apos;neg_mean_squared_error&apos;)&#13;&#10;grid_search.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Get the best estimator from GridSearchCV&#13;&#10;best_dt = grid_search.best_estimator_&#13;&#10;&#13;&#10;# Predict on the test set&#13;&#10;y_pred = best_dt.predict(X_test)&#13;&#10;&#13;&#10;# Calculate MAE, MSE, RMSE&#13;&#10;mae = mean_absolute_error(y_test, y_pred)&#13;&#10;mse = mean_squared_error(y_test, y_pred)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;# Assuming there&apos;s only one additional input for prediction&#13;&#10;inp_list = [&#13;&#10;    _arg10[0], _arg11[0], _arg12[0], _arg13[0],&#13;&#10;    _arg14[0], _arg15[0], _arg16[0], _arg17[0]&#13;&#10;]&#13;&#10;a = np.array(inp_list).reshape(1, -1)&#13;&#10;out = best_dt.predict(a)  # Use best_dt.predict for regression, not dt.predict_proba&#13;&#10;prediction = out[0]  # Access the predicted wind speed&#13;&#10;&#13;&#10;# Return the prediction and the error metrics&#13;&#10;return mse&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='RMSE LR' datatype='real' name='[Calculation_1136877448975712262]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.linear_model import LinearRegression&#13;&#10;from sklearn import metrics&#13;&#10;from sklearn.model_selection import train_test_split&#13;&#10;&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split the data into training and testing sets (80% train, 20% test)&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Train the model&#13;&#10;lr = LinearRegression()&#13;&#10;lr.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Make predictions on the test set&#13;&#10;predict = lr.predict(X_test)&#13;&#10;&#13;&#10;# Calculate evaluation metrics&#13;&#10;mae = metrics.mean_absolute_error(y_test, predict)&#13;&#10;mse = metrics.mean_squared_error(y_test, predict)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;return rmse&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='RMSE Tree' datatype='real' name='[Calculation_1136877448975785991]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.tree import DecisionTreeRegressor&#13;&#10;from sklearn.model_selection import GridSearchCV, train_test_split&#13;&#10;from sklearn.metrics import mean_absolute_error, mean_squared_error&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split data into training and testing sets&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Define parameter grid for GridSearchCV&#13;&#10;param_grid = {&#13;&#10;    &apos;max_depth&apos;: [3, 5, 7, 10],&#13;&#10;    &apos;min_samples_split&apos;: [2, 5, 10],&#13;&#10;    &apos;min_samples_leaf&apos;: [1, 2, 5, 10]&#13;&#10;}&#13;&#10;&#13;&#10;# Initialize and train Decision Tree Regressor with GridSearchCV&#13;&#10;dt = DecisionTreeRegressor()&#13;&#10;grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, cv=5, n_jobs=-1, scoring=&apos;neg_mean_squared_error&apos;)&#13;&#10;grid_search.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Get the best estimator from GridSearchCV&#13;&#10;best_dt = grid_search.best_estimator_&#13;&#10;&#13;&#10;# Predict on the test set&#13;&#10;y_pred = best_dt.predict(X_test)&#13;&#10;&#13;&#10;# Calculate MAE, MSE, RMSE&#13;&#10;mae = mean_absolute_error(y_test, y_pred)&#13;&#10;mse = mean_squared_error(y_test, y_pred)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;# Assuming there&apos;s only one additional input for prediction&#13;&#10;inp_list = [&#13;&#10;    _arg10[0], _arg11[0], _arg12[0], _arg13[0],&#13;&#10;    _arg14[0], _arg15[0], _arg16[0], _arg17[0]&#13;&#10;]&#13;&#10;a = np.array(inp_list).reshape(1, -1)&#13;&#10;out = best_dt.predict(a)  # Use best_dt.predict for regression, not dt.predict_proba&#13;&#10;prediction = out[0]  # Access the predicted wind speed&#13;&#10;&#13;&#10;# Return the prediction and the error metrics&#13;&#10;return rmse&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='TREE' datatype='real' name='[Calculation_1136877448975855624]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.tree import DecisionTreeRegressor&#13;&#10;from sklearn.model_selection import GridSearchCV&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Define parameter grid for GridSearchCV&#13;&#10;param_grid = {&#13;&#10;    &apos;max_depth&apos;: [3, 5, 7, 10],&#13;&#10;    &apos;min_samples_split&apos;: [2, 5, 10],&#13;&#10;    &apos;min_samples_leaf&apos;: [1, 2, 5, 10]&#13;&#10;}&#13;&#10;&#13;&#10;# Initialize and train Decision Tree Regressor with GridSearchCV&#13;&#10;dt = DecisionTreeRegressor()&#13;&#10;grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, cv=5, n_jobs=-1, scoring=&apos;neg_mean_squared_error&apos;)&#13;&#10;grid_search.fit(X, y)&#13;&#10;&#13;&#10;# Get the best estimator from GridSearchCV&#13;&#10;best_dt = grid_search.best_estimator_&#13;&#10;&#13;&#10;# Assuming there&apos;s only one additional input for prediction&#13;&#10;inp_list = [&#13;&#10;    _arg10[0], _arg11[0], _arg12[0], _arg13[0],&#13;&#10;    _arg14[0], _arg15[0], _arg16[0], _arg17[0]&#13;&#10;]&#13;&#10;a = np.array(inp_list).reshape(1, -1)&#13;&#10;out = best_dt.predict(a)  # Use best_dt.predict for regression, not dt.predict_proba&#13;&#10;prediction = out[0]  # Access the predicted wind speed&#13;&#10;&#13;&#10;return prediction&#13;&#10;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Corr' datatype='string' name='[Calculation_1136877448979177485]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.linear_model import LinearRegression&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;Year&apos;: literal_eval(_arg9[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0]),&#13;&#10;    &apos;Day&apos;: literal_eval(_arg11[0])&#13;&#10;&#13;&#10;})&#13;&#10;&#13;&#10;correlation_matrix=df.corr()&#13;&#10;wind = correlation_matrix[&apos;WIND&apos;].sort_values(ascending=False)&#13;&#10;&#13;&#10;return str(wind) &#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),ATTR([day]),ATTR([Year])&#13;&#10;)'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Ind.1' datatype='string' name='[IND.1]' role='dimension' type='nominal' />
      <column caption='Ind.2' datatype='string' name='[IND.2]' role='dimension' type='nominal' />
      <column caption='Rain' datatype='string' name='[RAIN]' role='dimension' type='nominal' />
      <column caption='T.Max' datatype='string' name='[T.MAX]' role='dimension' type='nominal' />
      <column caption='T.Min.G' datatype='string' name='[T.MIN.G]' role='dimension' type='nominal' />
      <column caption='T.Min' datatype='string' name='[T.MIN]' role='dimension' type='nominal' />
      <column caption='Wind' datatype='string' name='[WIND]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='wind_dataset_train.csv' datatype='table' name='[__tableau_internal_object_id__].[wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C]' role='measure' type='quantitative' />
      <column caption='Day' datatype='string' name='[day]' role='dimension' type='nominal' />
      <column caption='Month' datatype='string' name='[month]' role='dimension' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Viet Nam&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='month' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='1.0'>
          <calculation class='tableau' formula='1.0' />
        </column>
        <column caption='IND.1' datatype='real' name='[Parameter 2]' param-domain-type='any' role='measure' type='quantitative' value='0.'>
          <calculation class='tableau' formula='0.' />
        </column>
        <column caption='IND' datatype='real' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='0.'>
          <calculation class='tableau' formula='0.' />
        </column>
        <column caption='IND.2' datatype='real' name='[Parameter 4]' param-domain-type='any' role='measure' type='quantitative' value='1.'>
          <calculation class='tableau' formula='1.' />
        </column>
        <column caption='RAIN' datatype='real' name='[Parameter 5]' param-domain-type='any' role='measure' type='quantitative' value='10.4'>
          <calculation class='tableau' formula='10.4' />
        </column>
        <column caption='T.MAX' datatype='real' name='[Parameter 6]' param-domain-type='any' role='measure' type='quantitative' value='7.2'>
          <calculation class='tableau' formula='7.2' />
        </column>
        <column caption='T.MIN' datatype='real' name='[Parameter 7]' param-domain-type='any' role='measure' type='quantitative' value='-1.5'>
          <calculation class='tableau' formula='-1.5' />
        </column>
        <column caption='T.MIN.G' datatype='real' name='[Parameter 8]' param-domain-type='any' role='measure' type='quantitative' value='-7.5'>
          <calculation class='tableau' formula='-7.5' />
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='wind_dataset_train.csv' id='wind_dataset_train.csv_03B42F0E7CFC4CE8985F1E67C571D48C'>
            <properties context=''>
              <relation connection='textscan.0z1y7cm0deig461ekr7wj0cb47cy' name='wind_dataset_train.csv' table='[wind_dataset_train#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='WIND' ordinal='0' />
                  <column datatype='string' name='IND' ordinal='1' />
                  <column datatype='string' name='RAIN' ordinal='2' />
                  <column datatype='string' name='IND.1' ordinal='3' />
                  <column datatype='string' name='T.MAX' ordinal='4' />
                  <column datatype='string' name='IND.2' ordinal='5' />
                  <column datatype='string' name='T.MIN' ordinal='6' />
                  <column datatype='string' name='T.MIN.G' ordinal='7' />
                  <column datatype='string' name='Year' ordinal='8' />
                  <column datatype='string' name='month' ordinal='9' />
                  <column datatype='string' name='day' ordinal='10' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Biểu đồ hộp thể hiện phân phối tốc độ gió theo tháng'>
      <table>
        <view>
          <datasources>
            <datasource caption='wind-data' name='federated.0fs9obo1vdsctv1erfeqp12wfdiv' />
          </datasources>
          <datasource-dependencies datasource='federated.0fs9obo1vdsctv1erfeqp12wfdiv'>
            <column caption='month name' datatype='string' name='[Calculation_1136877448974712832]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [month] == 1&#13;&#10;then &apos;Jan&apos;&#13;&#10;ELSEIF  [month] ==2&#13;&#10;then  &apos;Feb&apos;&#13;&#10;ELSEIF  [month] ==3&#13;&#10;then  &apos;March&apos;&#13;&#10;ELSEIF  [month] ==4&#13;&#10;then  &apos;April&apos;&#13;&#10;ELSEIF  [month] ==5&#13;&#10;then  &apos;May&apos;&#13;&#10;ELSEIF  [month] ==6&#13;&#10;then  &apos;June&apos;&#13;&#10;ELSEIF  [month] ==7&#13;&#10;then  &apos;July&apos;&#13;&#10;ELSEIF  [month] == 8&#13;&#10;then  &apos;Aug&apos;&#13;&#10;ELSEIF  [month] ==9&#13;&#10;then  &apos;Sep&apos;&#13;&#10;ELSEIF  [month] == 10&#13;&#10;then  &apos;Oct&apos;&#13;&#10;ELSEIF  [month] ==11&#13;&#10;then  &apos;Nov&apos;&#13;&#10;ELSE &apos;Dec&apos;&#13;&#10;END' />
            </column>
            <column caption='Wind' datatype='real' name='[WIND]' role='measure' type='quantitative' />
            <column caption='Month' datatype='integer' name='[month]' role='dimension' type='quantitative' />
            <column-instance column='[Calculation_1136877448974712832]' derivation='None' name='[none:Calculation_1136877448974712832:nk]' pivot='key' type='nominal' />
            <column-instance column='[WIND]' derivation='Sum' name='[sum:WIND:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:Calculation_1136877448974712832:nk]' />
            </encodings>
            <reference-line axis-column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[sum:WIND:qk]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-cell' symmetric='false' value-column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[sum:WIND:qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[sum:WIND:qk]</rows>
        <cols>[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:Calculation_1136877448974712832:nk]</cols>
      </table>
      <simple-id uuid='{86AAD123-1090-4C99-9B34-C9EAE465AEA0}' />
    </worksheet>
    <worksheet name='Biểu đồ thể hiện xu hướng trung bình lượng mưa và gió theo tháng'>
      <table>
        <view>
          <datasources>
            <datasource caption='wind-data' name='federated.0fs9obo1vdsctv1erfeqp12wfdiv' />
          </datasources>
          <datasource-dependencies datasource='federated.0fs9obo1vdsctv1erfeqp12wfdiv'>
            <column caption='Rain' datatype='real' name='[RAIN]' role='measure' type='quantitative' />
            <column caption='T.Max' datatype='real' name='[T.MAX]' role='measure' type='quantitative' />
            <column caption='T.Min' datatype='real' name='[T.MIN]' role='measure' type='quantitative' />
            <column caption='Wind' datatype='real' name='[WIND]' role='measure' type='quantitative' />
            <column-instance column='[RAIN]' derivation='Avg' name='[avg:RAIN:qk]' pivot='key' type='quantitative' />
            <column-instance column='[WIND]' derivation='Avg' name='[avg:WIND:qk]' pivot='key' type='quantitative' />
            <column-instance column='[T.MAX]' derivation='Max' name='[max:T.MAX:qk]' pivot='key' type='quantitative' />
            <column-instance column='[T.MIN]' derivation='Min' name='[min:T.MIN:qk]' pivot='key' type='quantitative' />
            <column caption='Month' datatype='integer' name='[month]' role='dimension' type='quantitative' />
            <column-instance column='[month]' derivation='None' name='[none:month:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:month:qk]' field-type='quantitative' max='12' min='0' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:WIND:qk]' field-type='quantitative' max='12.174128179752614' min='0.99731528518511314' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[max:T.MAX:qk]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[min:T.MIN:qk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <_.fcp.PatternedLineMarks.true...format attr='mark-line-pattern' value='solid' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:WIND:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[max:T.MAX:qk]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[min:T.MIN:qk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <_.fcp.PatternedLineMarks.true...format attr='mark-line-pattern' value='solid' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:RAIN:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[max:T.MAX:qk]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[min:T.MIN:qk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <_.fcp.PatternedLineMarks.true...format attr='mark-line-pattern' value='solid' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:RAIN:qk] + [federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:WIND:qk])</rows>
        <cols>[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:month:qk]</cols>
      </table>
      <simple-id uuid='{8BE87568-5812-4B0A-95FD-6993CFB9E22F}' />
    </worksheet>
    <worksheet name='Corr'>
      <table>
        <view>
          <datasources>
            <datasource caption='wind_dataset_train' name='federated.1fvnhnl0949twh147waw100ixk2h' />
          </datasources>
          <datasource-dependencies datasource='federated.1fvnhnl0949twh147waw100ixk2h'>
            <column caption='Corr' datatype='string' name='[Calculation_1136877448979177485]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.linear_model import LinearRegression&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;Year&apos;: literal_eval(_arg9[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0]),&#13;&#10;    &apos;Day&apos;: literal_eval(_arg11[0])&#13;&#10;&#13;&#10;})&#13;&#10;&#13;&#10;correlation_matrix=df.corr()&#13;&#10;wind = correlation_matrix[&apos;WIND&apos;].sort_values(ascending=False)&#13;&#10;&#13;&#10;return str(wind) &#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),ATTR([day]),ATTR([Year])&#13;&#10;)'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Ind.1' datatype='string' name='[IND.1]' role='dimension' type='nominal' />
            <column caption='Ind.2' datatype='string' name='[IND.2]' role='dimension' type='nominal' />
            <column datatype='string' name='[IND]' role='dimension' type='nominal' />
            <column caption='Rain' datatype='string' name='[RAIN]' role='dimension' type='nominal' />
            <column caption='T.Max' datatype='string' name='[T.MAX]' role='dimension' type='nominal' />
            <column caption='T.Min.G' datatype='string' name='[T.MIN.G]' role='dimension' type='nominal' />
            <column caption='T.Min' datatype='string' name='[T.MIN]' role='dimension' type='nominal' />
            <column caption='Wind' datatype='string' name='[WIND]' role='dimension' type='nominal' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Day' datatype='string' name='[day]' role='dimension' type='nominal' />
            <column caption='Month' datatype='string' name='[month]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1136877448979177485]' derivation='User' name='[usr:Calculation_1136877448979177485:nk]' pivot='key' type='nominal'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448979177485:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{50D75F57-BD04-43C3-9C71-FA448CFE5A19}' />
    </worksheet>
    <worksheet name='Mô hình decision tree dự đoán tốc độ gió'>
      <table>
        <view>
          <datasources>
            <datasource caption='wind_dataset_train' name='federated.1fvnhnl0949twh147waw100ixk2h' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='month' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='1.0'>
              <calculation class='tableau' formula='1.0' />
            </column>
            <column caption='IND.1' datatype='real' name='[Parameter 2]' param-domain-type='any' role='measure' type='quantitative' value='0.'>
              <calculation class='tableau' formula='0.' />
            </column>
            <column caption='IND' datatype='real' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='0.'>
              <calculation class='tableau' formula='0.' />
            </column>
            <column caption='IND.2' datatype='real' name='[Parameter 4]' param-domain-type='any' role='measure' type='quantitative' value='1.'>
              <calculation class='tableau' formula='1.' />
            </column>
            <column caption='RAIN' datatype='real' name='[Parameter 5]' param-domain-type='any' role='measure' type='quantitative' value='10.4'>
              <calculation class='tableau' formula='10.4' />
            </column>
            <column caption='T.MAX' datatype='real' name='[Parameter 6]' param-domain-type='any' role='measure' type='quantitative' value='7.2'>
              <calculation class='tableau' formula='7.2' />
            </column>
            <column caption='T.MIN' datatype='real' name='[Parameter 7]' param-domain-type='any' role='measure' type='quantitative' value='-1.5'>
              <calculation class='tableau' formula='-1.5' />
            </column>
            <column caption='T.MIN.G' datatype='real' name='[Parameter 8]' param-domain-type='any' role='measure' type='quantitative' value='-7.5'>
              <calculation class='tableau' formula='-7.5' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1fvnhnl0949twh147waw100ixk2h'>
            <column caption='MAE Tree' datatype='real' name='[Calculation_1136877448975462403]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.tree import DecisionTreeRegressor&#13;&#10;from sklearn.model_selection import GridSearchCV, train_test_split&#13;&#10;from sklearn.metrics import mean_absolute_error, mean_squared_error&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split data into training and testing sets&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Define parameter grid for GridSearchCV&#13;&#10;param_grid = {&#13;&#10;    &apos;max_depth&apos;: [3, 5, 7, 10],&#13;&#10;    &apos;min_samples_split&apos;: [2, 5, 10],&#13;&#10;    &apos;min_samples_leaf&apos;: [1, 2, 5, 10]&#13;&#10;}&#13;&#10;&#13;&#10;# Initialize and train Decision Tree Regressor with GridSearchCV&#13;&#10;dt = DecisionTreeRegressor()&#13;&#10;grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, cv=5, n_jobs=-1, scoring=&apos;neg_mean_squared_error&apos;)&#13;&#10;grid_search.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Get the best estimator from GridSearchCV&#13;&#10;best_dt = grid_search.best_estimator_&#13;&#10;&#13;&#10;# Predict on the test set&#13;&#10;y_pred = best_dt.predict(X_test)&#13;&#10;&#13;&#10;# Calculate MAE, MSE, RMSE&#13;&#10;mae = mean_absolute_error(y_test, y_pred)&#13;&#10;mse = mean_squared_error(y_test, y_pred)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;# Assuming there&apos;s only one additional input for prediction&#13;&#10;inp_list = [&#13;&#10;    _arg10[0], _arg11[0], _arg12[0], _arg13[0],&#13;&#10;    _arg14[0], _arg15[0], _arg16[0], _arg17[0]&#13;&#10;]&#13;&#10;a = np.array(inp_list).reshape(1, -1)&#13;&#10;out = best_dt.predict(a)  # Use best_dt.predict for regression, not dt.predict_proba&#13;&#10;prediction = out[0]  # Access the predicted wind speed&#13;&#10;&#13;&#10;# Return the prediction and the error metrics&#13;&#10;return mae&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='MSE Tree' datatype='real' name='[Calculation_1136877448975650821]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.tree import DecisionTreeRegressor&#13;&#10;from sklearn.model_selection import GridSearchCV, train_test_split&#13;&#10;from sklearn.metrics import mean_absolute_error, mean_squared_error&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split data into training and testing sets&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Define parameter grid for GridSearchCV&#13;&#10;param_grid = {&#13;&#10;    &apos;max_depth&apos;: [3, 5, 7, 10],&#13;&#10;    &apos;min_samples_split&apos;: [2, 5, 10],&#13;&#10;    &apos;min_samples_leaf&apos;: [1, 2, 5, 10]&#13;&#10;}&#13;&#10;&#13;&#10;# Initialize and train Decision Tree Regressor with GridSearchCV&#13;&#10;dt = DecisionTreeRegressor()&#13;&#10;grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, cv=5, n_jobs=-1, scoring=&apos;neg_mean_squared_error&apos;)&#13;&#10;grid_search.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Get the best estimator from GridSearchCV&#13;&#10;best_dt = grid_search.best_estimator_&#13;&#10;&#13;&#10;# Predict on the test set&#13;&#10;y_pred = best_dt.predict(X_test)&#13;&#10;&#13;&#10;# Calculate MAE, MSE, RMSE&#13;&#10;mae = mean_absolute_error(y_test, y_pred)&#13;&#10;mse = mean_squared_error(y_test, y_pred)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;# Assuming there&apos;s only one additional input for prediction&#13;&#10;inp_list = [&#13;&#10;    _arg10[0], _arg11[0], _arg12[0], _arg13[0],&#13;&#10;    _arg14[0], _arg15[0], _arg16[0], _arg17[0]&#13;&#10;]&#13;&#10;a = np.array(inp_list).reshape(1, -1)&#13;&#10;out = best_dt.predict(a)  # Use best_dt.predict for regression, not dt.predict_proba&#13;&#10;prediction = out[0]  # Access the predicted wind speed&#13;&#10;&#13;&#10;# Return the prediction and the error metrics&#13;&#10;return mse&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='RMSE Tree' datatype='real' name='[Calculation_1136877448975785991]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.tree import DecisionTreeRegressor&#13;&#10;from sklearn.model_selection import GridSearchCV, train_test_split&#13;&#10;from sklearn.metrics import mean_absolute_error, mean_squared_error&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split data into training and testing sets&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Define parameter grid for GridSearchCV&#13;&#10;param_grid = {&#13;&#10;    &apos;max_depth&apos;: [3, 5, 7, 10],&#13;&#10;    &apos;min_samples_split&apos;: [2, 5, 10],&#13;&#10;    &apos;min_samples_leaf&apos;: [1, 2, 5, 10]&#13;&#10;}&#13;&#10;&#13;&#10;# Initialize and train Decision Tree Regressor with GridSearchCV&#13;&#10;dt = DecisionTreeRegressor()&#13;&#10;grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, cv=5, n_jobs=-1, scoring=&apos;neg_mean_squared_error&apos;)&#13;&#10;grid_search.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Get the best estimator from GridSearchCV&#13;&#10;best_dt = grid_search.best_estimator_&#13;&#10;&#13;&#10;# Predict on the test set&#13;&#10;y_pred = best_dt.predict(X_test)&#13;&#10;&#13;&#10;# Calculate MAE, MSE, RMSE&#13;&#10;mae = mean_absolute_error(y_test, y_pred)&#13;&#10;mse = mean_squared_error(y_test, y_pred)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;# Assuming there&apos;s only one additional input for prediction&#13;&#10;inp_list = [&#13;&#10;    _arg10[0], _arg11[0], _arg12[0], _arg13[0],&#13;&#10;    _arg14[0], _arg15[0], _arg16[0], _arg17[0]&#13;&#10;]&#13;&#10;a = np.array(inp_list).reshape(1, -1)&#13;&#10;out = best_dt.predict(a)  # Use best_dt.predict for regression, not dt.predict_proba&#13;&#10;prediction = out[0]  # Access the predicted wind speed&#13;&#10;&#13;&#10;# Return the prediction and the error metrics&#13;&#10;return rmse&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='TREE' datatype='real' name='[Calculation_1136877448975855624]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.tree import DecisionTreeRegressor&#13;&#10;from sklearn.model_selection import GridSearchCV&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Define parameter grid for GridSearchCV&#13;&#10;param_grid = {&#13;&#10;    &apos;max_depth&apos;: [3, 5, 7, 10],&#13;&#10;    &apos;min_samples_split&apos;: [2, 5, 10],&#13;&#10;    &apos;min_samples_leaf&apos;: [1, 2, 5, 10]&#13;&#10;}&#13;&#10;&#13;&#10;# Initialize and train Decision Tree Regressor with GridSearchCV&#13;&#10;dt = DecisionTreeRegressor()&#13;&#10;grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, cv=5, n_jobs=-1, scoring=&apos;neg_mean_squared_error&apos;)&#13;&#10;grid_search.fit(X, y)&#13;&#10;&#13;&#10;# Get the best estimator from GridSearchCV&#13;&#10;best_dt = grid_search.best_estimator_&#13;&#10;&#13;&#10;# Assuming there&apos;s only one additional input for prediction&#13;&#10;inp_list = [&#13;&#10;    _arg10[0], _arg11[0], _arg12[0], _arg13[0],&#13;&#10;    _arg14[0], _arg15[0], _arg16[0], _arg17[0]&#13;&#10;]&#13;&#10;a = np.array(inp_list).reshape(1, -1)&#13;&#10;out = best_dt.predict(a)  # Use best_dt.predict for regression, not dt.predict_proba&#13;&#10;prediction = out[0]  # Access the predicted wind speed&#13;&#10;&#13;&#10;return prediction&#13;&#10;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='0' datatype='integer' name='[Calculation_1136877448976666636]' role='measure' type='quantitative' user:unnamed='Sheet 2'>
              <calculation class='tableau' formula='0' />
            </column>
            <column caption='Ind.1' datatype='string' name='[IND.1]' role='dimension' type='nominal' />
            <column caption='Ind.2' datatype='string' name='[IND.2]' role='dimension' type='nominal' />
            <column datatype='string' name='[IND]' role='dimension' type='nominal' />
            <column caption='Rain' datatype='string' name='[RAIN]' role='dimension' type='nominal' />
            <column caption='T.Max' datatype='string' name='[T.MAX]' role='dimension' type='nominal' />
            <column caption='T.Min.G' datatype='string' name='[T.MIN.G]' role='dimension' type='nominal' />
            <column caption='T.Min' datatype='string' name='[T.MIN]' role='dimension' type='nominal' />
            <column caption='Wind' datatype='string' name='[WIND]' role='dimension' type='nominal' />
            <column caption='Month' datatype='string' name='[month]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1136877448976666636]' derivation='Sum' name='[sum:Calculation_1136877448976666636:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1136877448975462403]' derivation='User' name='[usr:Calculation_1136877448975462403:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_1136877448975650821]' derivation='User' name='[usr:Calculation_1136877448975650821:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_1136877448975785991]' derivation='User' name='[usr:Calculation_1136877448975785991:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_1136877448975855624]' derivation='User' name='[usr:Calculation_1136877448975855624:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.1fvnhnl0949twh147waw100ixk2h].[sum:Calculation_1136877448976666636:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='stroke-size' value='0' />
            <format attr='line-visibility' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975855624:qk]' />
              <text column='[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975462403:qk]' />
              <text column='[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975650821:qk]' />
              <text column='[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975785991:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run bold='true' fontcolor='#59a14f' fontsize='14'>DECISION TREE</run>
                <run>Æ&#10;</run>
                <run bold='true' fontcolor='#606b76' fontsize='12'><![CDATA[Predict Speed Wind: <[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975855624:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#79706e' fontsize='11'><![CDATA[MAE: <[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975462403:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#79706e' fontsize='11'><![CDATA[MSE: <[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975650821:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#79706e' fontsize='11'><![CDATA[RMSE: <[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975785991:qk]>]]></run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='9.5312213897705078' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#a0cbe8' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1fvnhnl0949twh147waw100ixk2h].[sum:Calculation_1136877448976666636:qk]</rows>
        <cols />
        <mark-labels>
          <mark-label id='0'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields>
                    <field>[federated.1fvnhnl0949twh147waw100ixk2h].[sum:Calculation_1136877448976666636:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1fvnhnl0949twh147waw100ixk2h].[sum:Calculation_1136877448976666636:qk]</field>
                  <field>[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975462403:qk]</field>
                  <field>[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975650821:qk]</field>
                  <field>[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975785991:qk]</field>
                  <field>[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975855624:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>0</value>
                <value>3.540178773472467</value>
                <value>20.094055955526532</value>
                <value>4.4826393961065545</value>
                <value>13.988846153846151</value>
              </tuple>
            </tuple-reference>
            <label-position x='0.486014' y='0.477352' />
          </mark-label>
        </mark-labels>
      </table>
      <simple-id uuid='{CCC18D63-30BC-42A6-91C4-99E9AC342331}' />
    </worksheet>
    <worksheet name='Mô hình linear regression dự đoán tốc độ gió'>
      <table>
        <view>
          <datasources>
            <datasource caption='wind_dataset_train' name='federated.1fvnhnl0949twh147waw100ixk2h' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='month' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='1.0'>
              <calculation class='tableau' formula='1.0' />
            </column>
            <column caption='IND.1' datatype='real' name='[Parameter 2]' param-domain-type='any' role='measure' type='quantitative' value='0.'>
              <calculation class='tableau' formula='0.' />
            </column>
            <column caption='IND' datatype='real' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='0.'>
              <calculation class='tableau' formula='0.' />
            </column>
            <column caption='IND.2' datatype='real' name='[Parameter 4]' param-domain-type='any' role='measure' type='quantitative' value='1.'>
              <calculation class='tableau' formula='1.' />
            </column>
            <column caption='RAIN' datatype='real' name='[Parameter 5]' param-domain-type='any' role='measure' type='quantitative' value='10.4'>
              <calculation class='tableau' formula='10.4' />
            </column>
            <column caption='T.MAX' datatype='real' name='[Parameter 6]' param-domain-type='any' role='measure' type='quantitative' value='7.2'>
              <calculation class='tableau' formula='7.2' />
            </column>
            <column caption='T.MIN' datatype='real' name='[Parameter 7]' param-domain-type='any' role='measure' type='quantitative' value='-1.5'>
              <calculation class='tableau' formula='-1.5' />
            </column>
            <column caption='T.MIN.G' datatype='real' name='[Parameter 8]' param-domain-type='any' role='measure' type='quantitative' value='-7.5'>
              <calculation class='tableau' formula='-7.5' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1fvnhnl0949twh147waw100ixk2h'>
            <column caption='Linear Regression' datatype='real' name='[Calculation_1136877448975245313]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.linear_model import LinearRegression&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;lr = LinearRegression()&#13;&#10;lr.fit(X, y)&#13;&#10;&#13;&#10;# Assuming there&apos;s only one additional input for prediction&#13;&#10;inp_list = [_arg10[0], _arg11[0], _arg12[0], _arg13[0], _arg14[0], _arg15[0], _arg16[0], _arg17[0]]&#13;&#10;&#13;&#10;a = np.array(inp_list).reshape(1, -1)&#13;&#10;out = lr.predict(a)  # Use dt.predict for regression, not dt.predict_proba&#13;&#10;prediction = out[0]  # Access the predicted wind speed&#13;&#10;&#13;&#10;return prediction&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='MAE LR' datatype='real' name='[Calculation_1136877448975355906]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.linear_model import LinearRegression&#13;&#10;from sklearn import metrics&#13;&#10;from sklearn.model_selection import train_test_split&#13;&#10;&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split the data into training and testing sets (80% train, 20% test)&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Train the model&#13;&#10;lr = LinearRegression()&#13;&#10;lr.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Make predictions on the test set&#13;&#10;predict = lr.predict(X_test)&#13;&#10;&#13;&#10;# Calculate evaluation metrics&#13;&#10;mae = metrics.mean_absolute_error(y_test, predict)&#13;&#10;mse = metrics.mean_squared_error(y_test, predict)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;return mae&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='MSE LR' datatype='real' name='[Calculation_1136877448975568900]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.linear_model import LinearRegression&#13;&#10;from sklearn import metrics&#13;&#10;from sklearn.model_selection import train_test_split&#13;&#10;&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split the data into training and testing sets (80% train, 20% test)&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Train the model&#13;&#10;lr = LinearRegression()&#13;&#10;lr.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Make predictions on the test set&#13;&#10;predict = lr.predict(X_test)&#13;&#10;&#13;&#10;# Calculate evaluation metrics&#13;&#10;mae = metrics.mean_absolute_error(y_test, predict)&#13;&#10;mse = metrics.mean_squared_error(y_test, predict)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;return mse&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='RMSE LR' datatype='real' name='[Calculation_1136877448975712262]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&quot;&#13;&#10;import pandas as pd&#13;&#10;import numpy as np&#13;&#10;from ast import literal_eval&#13;&#10;from sklearn.linear_model import LinearRegression&#13;&#10;from sklearn import metrics&#13;&#10;from sklearn.model_selection import train_test_split&#13;&#10;&#13;&#10;&#13;&#10;# Construct DataFrame from input attributes&#13;&#10;df = pd.DataFrame({&#13;&#10;    &apos;WIND&apos;: literal_eval(_arg1[0]),&#13;&#10;    &apos;IND&apos;: literal_eval(_arg2[0]),&#13;&#10;    &apos;RAIN&apos;: literal_eval(_arg3[0]),&#13;&#10;    &apos;IND.1&apos;: literal_eval(_arg4[0]),&#13;&#10;    &apos;T.MAX&apos;: literal_eval(_arg5[0]),&#13;&#10;    &apos;IND.2&apos;: literal_eval(_arg6[0]),&#13;&#10;    &apos;T.MIN&apos;: literal_eval(_arg7[0]),&#13;&#10;    &apos;T.MIN.G&apos;: literal_eval(_arg8[0]),&#13;&#10;    &apos;month&apos;: literal_eval(_arg9[0])&#13;&#10;})&#13;&#10;&#13;&#10;# Separate features and target variable&#13;&#10;X = df.iloc[:, 1:]  # Exclude the first column &apos;WIND&apos; from features&#13;&#10;y = df[&apos;WIND&apos;]  # Target variable is &apos;WIND&apos;&#13;&#10;&#13;&#10;# Split the data into training and testing sets (80% train, 20% test)&#13;&#10;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)&#13;&#10;&#13;&#10;# Train the model&#13;&#10;lr = LinearRegression()&#13;&#10;lr.fit(X_train, y_train)&#13;&#10;&#13;&#10;# Make predictions on the test set&#13;&#10;predict = lr.predict(X_test)&#13;&#10;&#13;&#10;# Calculate evaluation metrics&#13;&#10;mae = metrics.mean_absolute_error(y_test, predict)&#13;&#10;mse = metrics.mean_squared_error(y_test, predict)&#13;&#10;rmse = np.sqrt(mse)&#13;&#10;&#13;&#10;return rmse&#13;&#10;&#13;&#10;&quot;,&#13;&#10;ATTR([WIND]),ATTR([IND]),ATTR([RAIN]),ATTR([IND.1]),&#13;&#10;ATTR([T.MAX]),ATTR([IND.2]),ATTR([T.MIN]),&#13;&#10;ATTR([T.MIN.G]),ATTR([month]),&#13;&#10;[Parameters].[Parameter 3],[Parameters].[Parameter 5],[Parameters].[Parameter 2],[Parameters].[Parameter 6],&#13;&#10;[Parameters].[Parameter 4],[Parameters].[Parameter 7],[Parameters].[Parameter 8],[Parameters].[Parameter 1]&#13;&#10;)'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='0' datatype='integer' name='[Calculation_1136877448975986698]' role='measure' type='quantitative' user:unnamed='Sheet 1'>
              <calculation class='tableau' formula='0' />
            </column>
            <column caption='Ind.1' datatype='string' name='[IND.1]' role='dimension' type='nominal' />
            <column caption='Ind.2' datatype='string' name='[IND.2]' role='dimension' type='nominal' />
            <column datatype='string' name='[IND]' role='dimension' type='nominal' />
            <column caption='Rain' datatype='string' name='[RAIN]' role='dimension' type='nominal' />
            <column caption='T.Max' datatype='string' name='[T.MAX]' role='dimension' type='nominal' />
            <column caption='T.Min.G' datatype='string' name='[T.MIN.G]' role='dimension' type='nominal' />
            <column caption='T.Min' datatype='string' name='[T.MIN]' role='dimension' type='nominal' />
            <column caption='Wind' datatype='string' name='[WIND]' role='dimension' type='nominal' />
            <column caption='Month' datatype='string' name='[month]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1136877448975986698]' derivation='Sum' name='[sum:Calculation_1136877448975986698:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1136877448975245313]' derivation='User' name='[usr:Calculation_1136877448975245313:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_1136877448975355906]' derivation='User' name='[usr:Calculation_1136877448975355906:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_1136877448975568900]' derivation='User' name='[usr:Calculation_1136877448975568900:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_1136877448975712262]' derivation='User' name='[usr:Calculation_1136877448975712262:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.1fvnhnl0949twh147waw100ixk2h].[sum:Calculation_1136877448975986698:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='stroke-size' value='0' />
            <format attr='line-visibility' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975245313:qk]' />
              <text column='[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975355906:qk]' />
              <text column='[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975568900:qk]' />
              <text column='[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975712262:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run bold='true' fontcolor='#4e79a7' fontsize='14'>LINEAR REGRESSION</run>
                <run>Æ&#10;</run>
                <run bold='true' fontcolor='#4e79a7' fontsize='12'><![CDATA[Predict Speed Wind: <[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975245313:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#79706e' fontsize='11'><![CDATA[MAE: <[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975355906:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#79706e' fontsize='11'><![CDATA[MSE: <[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975568900:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#79706e' fontsize='11'><![CDATA[RMSE: <[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975712262:qk]>]]></run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='9.8604745864868164' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#e6e6e6' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1fvnhnl0949twh147waw100ixk2h].[sum:Calculation_1136877448975986698:qk]</rows>
        <cols />
        <mark-labels>
          <mark-label id='0'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields>
                    <field>[federated.1fvnhnl0949twh147waw100ixk2h].[sum:Calculation_1136877448975986698:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1fvnhnl0949twh147waw100ixk2h].[sum:Calculation_1136877448975986698:qk]</field>
                  <field>[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975245313:qk]</field>
                  <field>[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975355906:qk]</field>
                  <field>[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975568900:qk]</field>
                  <field>[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448975712262:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>0</value>
                <value>13.680248755185673</value>
                <value>3.792298656250229</value>
                <value>21.733440653660079</value>
                <value>4.6619138402227129</value>
              </tuple>
            </tuple-reference>
            <label-position x='0.496622' y='0.491582' />
          </mark-label>
        </mark-labels>
      </table>
      <simple-id uuid='{C3A9A61E-2A67-4DBB-9793-9CDCC281B3E6}' />
    </worksheet>
    <worksheet name='Tốc độ gió trung bình'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='18'>&lt;Sheet Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='wind-data' name='federated.0fs9obo1vdsctv1erfeqp12wfdiv' />
          </datasources>
          <datasource-dependencies datasource='federated.0fs9obo1vdsctv1erfeqp12wfdiv'>
            <column caption='Wind' datatype='real' name='[WIND]' role='measure' type='quantitative' />
            <column-instance column='[WIND]' derivation='Avg' name='[avg:WIND:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-weight' value='bold' />
            <format attr='color' value='#555555' />
            <format attr='font-size' value='15' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='background-color' data-class='subtotal' value='#f9f8f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#dfedeb' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:WIND:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{5F5AD815-3F77-47BF-A141-E28167B65717}' />
    </worksheet>
    <worksheet name='Wind by month'>
      <table>
        <view>
          <datasources>
            <datasource caption='wind-data' name='federated.0fs9obo1vdsctv1erfeqp12wfdiv' />
          </datasources>
          <datasource-dependencies datasource='federated.0fs9obo1vdsctv1erfeqp12wfdiv'>
            <column caption='Rain' datatype='real' name='[RAIN]' role='measure' type='quantitative' />
            <column caption='T.Max' datatype='real' name='[T.MAX]' role='measure' type='quantitative' />
            <column caption='T.Min.G' datatype='real' name='[T.MIN.G]' role='measure' type='quantitative' />
            <column caption='T.Min' datatype='real' name='[T.MIN]' role='measure' type='quantitative' />
            <column caption='Wind' datatype='real' name='[WIND]' role='measure' type='quantitative' />
            <column-instance column='[RAIN]' derivation='Avg' name='[avg:RAIN:qk]' pivot='key' type='quantitative' />
            <column-instance column='[T.MAX]' derivation='Avg' name='[avg:T.MAX:qk]' pivot='key' type='quantitative' />
            <column-instance column='[T.MIN.G]' derivation='Avg' name='[avg:T.MIN.G:qk]' pivot='key' type='quantitative' />
            <column-instance column='[T.MIN]' derivation='Avg' name='[avg:T.MIN:qk]' pivot='key' type='quantitative' />
            <column-instance column='[WIND]' derivation='Avg' name='[avg:WIND:qk]' pivot='key' type='quantitative' />
            <column caption='Month' datatype='integer' name='[month]' role='dimension' type='quantitative' />
            <column-instance column='[month]' derivation='None' name='[none:month:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:WIND:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[:Measure Names]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:T.MAX:qk]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:T.MIN:qk]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:T.MIN.G:qk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:RAIN:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[:Measure Names]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:T.MAX:qk]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:T.MIN:qk]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:T.MIN.G:qk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:WIND:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[:Measure Names]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:T.MAX:qk]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:T.MIN:qk]' />
              <lod column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:T.MIN.G:qk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
        </panes>
        <rows>([federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:RAIN:qk] + [federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:WIND:qk])</rows>
        <cols>[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:month:qk]</cols>
      </table>
      <simple-id uuid='{176C3D57-341C-4C3C-A803-58FD80AD39ED}' />
    </worksheet>
    <worksheet name='Wind by year'>
      <table>
        <view>
          <datasources>
            <datasource caption='wind-data' name='federated.0fs9obo1vdsctv1erfeqp12wfdiv' />
          </datasources>
          <datasource-dependencies datasource='federated.0fs9obo1vdsctv1erfeqp12wfdiv'>
            <column caption='Rain' datatype='real' name='[RAIN]' role='measure' type='quantitative' />
            <column caption='Wind' datatype='real' name='[WIND]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[RAIN]' derivation='Avg' name='[avg:RAIN:qk]' pivot='key' type='quantitative' />
            <column-instance column='[WIND]' derivation='Avg' name='[avg:WIND:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:WIND:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:RAIN:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:WIND:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:RAIN:qk] + [federated.0fs9obo1vdsctv1erfeqp12wfdiv].[avg:WIND:qk])</rows>
        <cols>[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{1898B56E-9778-4664-BFB6-6DBBEF4921F4}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='WIND-DASHBOARD'>
      <style>
        <style-rule element='table'>
          <format attr='background-color' value='#f3faf9' />
        </style-rule>
      </style>
      <size maxheight='850' maxwidth='1650' minheight='850' minwidth='1650' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='month' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='1.0'>
          <calculation class='tableau' formula='1.0' />
        </column>
        <column caption='IND.1' datatype='real' name='[Parameter 2]' param-domain-type='any' role='measure' type='quantitative' value='0.'>
          <calculation class='tableau' formula='0.' />
        </column>
        <column caption='IND' datatype='real' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='0.'>
          <calculation class='tableau' formula='0.' />
        </column>
        <column caption='IND.2' datatype='real' name='[Parameter 4]' param-domain-type='any' role='measure' type='quantitative' value='1.'>
          <calculation class='tableau' formula='1.' />
        </column>
        <column caption='RAIN' datatype='real' name='[Parameter 5]' param-domain-type='any' role='measure' type='quantitative' value='10.4'>
          <calculation class='tableau' formula='10.4' />
        </column>
        <column caption='T.MAX' datatype='real' name='[Parameter 6]' param-domain-type='any' role='measure' type='quantitative' value='7.2'>
          <calculation class='tableau' formula='7.2' />
        </column>
        <column caption='T.MIN' datatype='real' name='[Parameter 7]' param-domain-type='any' role='measure' type='quantitative' value='-1.5'>
          <calculation class='tableau' formula='-1.5' />
        </column>
        <column caption='T.MIN.G' datatype='real' name='[Parameter 8]' param-domain-type='any' role='measure' type='quantitative' value='-7.5'>
          <calculation class='tableau' formula='-7.5' />
        </column>
      </datasource-dependencies>
      <zones>
        <zone forceUpdate='true' h='10118' id='3' type-v2='text' w='99152' x='606' y='1176'>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#555555' fontsize='28'>PHÂN TÍCH TỐC ĐỘ GIÓ</run>
          </formatted-text>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='background-color' value='#e7f1f5' />
          </zone-style>
        </zone>
        <zone h='41765' id='7' name='Mô hình linear regression dự đoán tốc độ gió' w='33939' x='15212' y='12118'>
          <zone-style>
            <format attr='border-color' value='#a0cbe8' />
            <format attr='border-style' value='solid' />
            <format attr='border-width' value='1' />
          </zone-style>
        </zone>
        <zone h='41059' id='18' name='Mô hình decision tree dự đoán tốc độ gió' w='33636' x='15879' y='57412'>
          <zone-style>
            <format attr='border-color' value='#a0cbe8' />
            <format attr='border-style' value='solid' />
            <format attr='border-width' value='1' />
          </zone-style>
        </zone>
        <zone h='41882' id='19' name='Biểu đồ hộp thể hiện phân phối tốc độ gió theo tháng' w='42545' x='50303' y='11882'>
          <zone-style>
            <format attr='border-color' value='#a0cbe8' />
            <format attr='border-style' value='solid' />
            <format attr='border-width' value='1' />
          </zone-style>
        </zone>
        <zone h='32235' id='20' name='Biểu đồ hộp thể hiện phân phối tốc độ gió theo tháng' pane-specification-id='0' param='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:Calculation_1136877448974712832:nk]' type-v2='color' w='6121' x='93515' y='11882' />
        <zone h='40824' id='21' name='Biểu đồ thể hiện xu hướng trung bình lượng mưa và gió theo tháng' w='46788' x='50909' y='57294'>
          <zone-style>
            <format attr='border-color' value='#a0cbe8' />
            <format attr='border-style' value='solid' />
            <format attr='border-width' value='1' />
          </zone-style>
        </zone>
        <zone h='53294' id='51' param='vert' type-v2='layout-flow' w='12485' x='1515' y='39647'>
          <zone h='6588' id='10' mode='type_in' param='[Parameters].[Parameter 3]' type-v2='paramctrl' w='12363' x='1576' y='39765'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='6588' id='9' mode='type_in' param='[Parameters].[Parameter 2]' type-v2='paramctrl' w='12363' x='1576' y='46353'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='6588' id='11' mode='type_in' param='[Parameters].[Parameter 4]' type-v2='paramctrl' w='12363' x='1576' y='52941'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='6588' id='8' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='12363' x='1576' y='59529'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='6588' id='12' mode='type_in' param='[Parameters].[Parameter 5]' type-v2='paramctrl' w='12363' x='1576' y='66117'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='6588' id='13' mode='type_in' param='[Parameters].[Parameter 6]' type-v2='paramctrl' w='12363' x='1576' y='72705'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='6588' id='14' mode='type_in' param='[Parameters].[Parameter 7]' type-v2='paramctrl' w='12363' x='1576' y='79293'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='6588' id='15' mode='type_in' param='[Parameters].[Parameter 8]' type-v2='paramctrl' w='12363' x='1576' y='85881'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#a0cbe8' />
            <format attr='border-style' value='solid' />
            <format attr='border-width' value='1' />
          </zone-style>
        </zone>
        <zone h='18118' id='54' param='horz' type-v2='layout-flow' w='14182' x='606' y='17176'>
          <zone h='18118' id='55' name='Tốc độ gió trung bình' w='14182' x='606' y='17176'>
            <layout-cache cell-count-w='1' type-h='cell' type-w='cell' />
            <zone-style>
              <format attr='border-color' value='#a0cbe8' />
              <format attr='border-style' value='solid' />
              <format attr='border-width' value='1' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='2000' minheight='2000' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='71' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='84000' id='70' param='vert' type-v2='layout-flow' w='84000' x='8000' y='8000'>
                <zone forceUpdate='true' h='10118' id='3' type-v2='text' w='99152' x='606' y='1176'>
                  <formatted-text>
                    <run bold='true' fontalignment='1' fontcolor='#555555' fontsize='28'>PHÂN TÍCH TỐC ĐỘ GIÓ</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                    <format attr='background-color' value='#e7f1f5' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='41882' id='19' is-fixed='true' name='Biểu đồ hộp thể hiện phân phối tốc độ gió theo tháng' w='42545' x='50303' y='11882'>
                  <zone-style>
                    <format attr='border-color' value='#a0cbe8' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='32235' id='20' name='Biểu đồ hộp thể hiện phân phối tốc độ gió theo tháng' pane-specification-id='0' param='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:Calculation_1136877448974712832:nk]' type-v2='color' w='6121' x='93515' y='11882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='41765' id='7' is-fixed='true' name='Mô hình linear regression dự đoán tốc độ gió' w='33939' x='15212' y='12118'>
                  <zone-style>
                    <format attr='border-color' value='#a0cbe8' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='144' h='18118' id='55' is-fixed='true' name='Tốc độ gió trung bình' w='14182' x='606' y='17176'>
                  <layout-cache cell-count-w='1' type-h='cell' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#a0cbe8' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6588' id='10' mode='type_in' param='[Parameters].[Parameter 3]' type-v2='paramctrl' w='12363' x='1576' y='39765'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6588' id='9' mode='type_in' param='[Parameters].[Parameter 2]' type-v2='paramctrl' w='12363' x='1576' y='46353'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6588' id='11' mode='type_in' param='[Parameters].[Parameter 4]' type-v2='paramctrl' w='12363' x='1576' y='52941'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='40824' id='21' is-fixed='true' name='Biểu đồ thể hiện xu hướng trung bình lượng mưa và gió theo tháng' w='46788' x='50909' y='57294'>
                  <zone-style>
                    <format attr='border-color' value='#a0cbe8' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='41059' id='18' is-fixed='true' name='Mô hình decision tree dự đoán tốc độ gió' w='33636' x='15879' y='57412'>
                  <zone-style>
                    <format attr='border-color' value='#a0cbe8' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6588' id='8' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='12363' x='1576' y='59529'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6588' id='12' mode='type_in' param='[Parameters].[Parameter 5]' type-v2='paramctrl' w='12363' x='1576' y='66117'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6588' id='13' mode='type_in' param='[Parameters].[Parameter 6]' type-v2='paramctrl' w='12363' x='1576' y='72705'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6588' id='14' mode='type_in' param='[Parameters].[Parameter 7]' type-v2='paramctrl' w='12363' x='1576' y='79293'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6588' id='15' mode='type_in' param='[Parameters].[Parameter 8]' type-v2='paramctrl' w='12363' x='1576' y='85881'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{254DA71C-D535-46C5-85F4-057DE417E414}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='63'>
    <window class='worksheet' name='Mô hình linear regression dự đoán tốc độ gió'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 5]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 6]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 7]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 8]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <simple-id uuid='{0203EFA8-B148-4DED-9532-6174325A1797}' />
    </window>
    <window class='worksheet' maximized='true' name='Mô hình decision tree dự đoán tốc độ gió'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 5]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 6]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 7]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 8]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <simple-id uuid='{E9C5893C-7CDF-4ADA-B468-E85D1774E3C8}' />
    </window>
    <window class='worksheet' name='Biểu đồ thể hiện xu hướng trung bình lượng mưa và gió theo tháng'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:month:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FA1E5AF7-9A40-4847-81BF-A3F9B1DC0378}' />
    </window>
    <window class='worksheet' name='Biểu đồ hộp thể hiện phân phối tốc độ gió theo tháng'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:Calculation_1136877448974712832:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:Calculation_1136877448974712832:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AD4A9EE0-5386-46C8-B08A-F7CA9A3D69DC}' />
    </window>
    <window class='dashboard' name='WIND-DASHBOARD'>
      <viewpoints>
        <viewpoint name='Biểu đồ hộp thể hiện phân phối tốc độ gió theo tháng'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[none:Calculation_1136877448974712832:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Biểu đồ thể hiện xu hướng trung bình lượng mưa và gió theo tháng'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Mô hình decision tree dự đoán tốc độ gió'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Mô hình linear regression dự đoán tốc độ gió'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Tốc độ gió trung bình'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{3CD651B5-23CE-4EC7-AE88-266EC74FF2D2}' />
    </window>
    <window class='worksheet' name='Tốc độ gió trung bình'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{19EB4488-319B-4EA5-8749-28801CE5948B}' />
    </window>
    <window class='worksheet' name='Corr'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1fvnhnl0949twh147waw100ixk2h].[usr:Calculation_1136877448979177485:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{05DAEEC7-0528-4357-B698-4554A7311CD3}' />
    </window>
    <window class='worksheet' name='Wind by year'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[:Measure Names]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D8C2344A-9CB4-428D-8120-3E548FCDBC80}' />
    </window>
    <window class='worksheet' name='Wind by month'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fs9obo1vdsctv1erfeqp12wfdiv].[:Measure Names]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E0DEF827-4B83-4EC9-9EF2-82264B3D3432}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Biểu đồ hộp thể hiện phân phối tốc độ gió theo tháng' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOy9Z5Akd3re+UtTvqq72vdMT483PRYeGGDhuBZcgrtaSjpKlFYK6hTUmbi4
      D6e4DxdxugsqJN2H491JEZJCUvCOFKmT9qRdSTRLLrDkGnhg4MZg/HT3tPembNr/fcis6mpg
      ZrryzUHPYjEPYiKrE/VmZmXm373v8z6vppRS3Md9fE6h3+sLuI/7uJe43wDu43ON+w3gM47S
      2iqur7hy5cq9vpTPJMx7fQH3cXso3+XlH/wpLiZpHQ4ePcK1a6Ps3L2PiRuX0JIdLF57j31P
      vcjVt39KzbF54NhRfvRnP8T1dU6eOMrFjy4wtG8/o9dvommAnuDQ7h5Gb87y4Onn6M59vl+B
      +yPAzzKUompraIZiMK/4s9fP89iTD3H+3fexVIrq6jx9O4Y5dGAP+c5e8l3doBRrZYukV+by
      9XH8+irnL10nUewHV2HYdV59402SCYNa3brXv/CeQ7vvBfrZhfI9Ll6+hmlqFJPgp4tcvnSJ
      /YdHqJRLKMeipzPFzLpGQtUZ2LWLnkKejy5eJmMqXB+WV5bJd/eTznXiV8vo+KSSPqPTq5x8
      4EGKudS9/pn3FHetAfi+j67fH1Du47OFu/bG3h9I7uOziEgroHp5levjU6RzRYb787x7YZTT
      jz6A7/t4nne/EdzHZw6RGkAq18lAT5mSozE2MUshl0bTNAzDAGhu7+M+PiuINAUqLU6xWFUM
      9XZg2zaTEzepWO6ndW33cR+fOiItgmvlNWbml8h39tDf00mtViOTyQDged79EeA+PnO4a16g
      +w3gPj6LuO+3vI/PNe43gPv4XGNbiCAfXpvl/auz/JUvnSCdbO+Uq6urlMtlAFZqLh9MlXlg
      Z57ubGCfz+cpFovtXYBSqPoaJHNoRkL0G+7j5xOfWgP4/ve/z9LSEgBvXJhkbmGRtRtH6O4I
      Fs3PPfccu3fvvq394uIiExMTQNAALn50g+zR/c0GsGvXrjs2gKWlJS5evBj8YVewXvsnGLse
      xTz0FQByuRwPPfRQ7N95H59tfGoN4Otf/3rz89y/e52ZN8/wjV/5y+zb0dWW/cGDBzl48CAA
      luujZzp44ZnHSJvtzdrS6TQ7d+4M/rDLXE50snegn1S4L5lMRvg19/Hzim2ZAlmOh0Jhu57I
      /tpijWtLda4t1DixI9eWTS6XY//+/QD4lQVWMy67uxPkwn2RoBRMvglosOsJAl7xfXzWYE9M
      UH7pZTq++U3M3h5gmxpAOmmioZFKyE63rzvNgZ40+3rSInt/eQx/ZQxv/HU4/Rtt2di2zXe+
      853wAB5Mv8Nq1aN46BJogbv3V3/1V++PJG1CKcUPr1wibSZ4ev8BtG3qRN544w2uXbsGgD06
      ysL5CwwsLWLu2AFsUwPYO9jJtZ48+YzsZckmDfZ3p8klZXEGLZUHDbRUoW2bZDLJt7/97eAP
      30NdSHLu5jqnfvHboH8e4x2KRsRI8vKWbYt/9fprpBMmT+7dhymIGdmeS91xKKTSbV/Dk08+
      yZNPPgmAX6nw7p/8CY9+4xtoYccVqQEo5TM/O0tHTz/KKlOxoa9na0/MN58eYShboydcAEeF
      4/nMlx0czydhRPfcamYKLZlHy/SIzo9uwIm/Curc5/TlB99apHr9H5PofZZU/1cj2+eTKf7u
      F79M2jQxItDmf/jDH1KpVAC4OD/LfGmdL+w7iBke46mnnqKvr6+tY+m5HMlDh5ovP0RsAFal
      hJ5Mce3qNfp7Opifnqez50G26tf/xR+c4bU3z/CPhg+wZ7BN12ULLi/U+HCmwuB8jZNtrgE2
      QTNQvgvECHr7Hihfbv8Zh/ItfHcd5ayK7DVN4/E9eyPbPfHEE/h+cN/LH51l5fx5nnrmabKJ
      4K3L5dp/H5Tvo+r1YE0XjiCRGkAyk2Vx/BLDew5hr8+R6ekjoRTeFnToxbUqVcuhVK3jutHJ
      c5bjNbcSe7+8AE4db21SZI/voZ/7PdREGffo0c/nKJAYJHP4N9GMjOweCtHgmgGoRAI9mcBM
      pchlss397V5P+aWXWfq3/47Sf+OTeewxIGIDWJoapexoVCvr3LwxQWfPAJ6mNedzt+MC2U7Q
      gh1PYZrRlx3ZlBluDZG96h/B3P8cyZNfEtnjuqjKPFq1gqkrkBzj5wFm9NH7biJhGOiahmma
      oufoz8+jbAu1uNS0j3SUvt2H6QtjVzsH+tu2y6aD6Gs2JYvCNkYWXziD0VJ5ko/+OubBQ7ID
      GCno2g+VcvD5HsD1HaarE+zM7sbUP58N0DQMNDQMTcbgyT72KImLF0k/cKq57zPBBRouptlT
      TLG7eI8SuN06rFyD5evg3RslhQ+XzvDvb/wO55ffvSfn/1lAXz5PdzZHUsg6Th8/TvHX/irJ
      FgbCtnQlX3x4H5Rn2dXfIbIvpAwO92XoSMsuV9lV7A/+DZ75RRKHvxT9AGYKug5AuQzGvfH7
      787v50jnCYbz++7J+X8W0JHK0JFOo+t3L4awLQ3gyeO7yLqHyaVlL89cyeatmyUG9tsMFqIf
      w1+9iXv1ZZxsibSkAfgurE9AqRJ8vgeNoC8zwIt7/ottP28DSvl45avo6Z3oifbjKXcT70/d
      5MbSAsuVCoMdnXflmNsyBVJK4SslTppfqjqsWx6LFecuX1kEKAX3MOl/pjrJf7jxu8zVpu/J
      +b3KDarX/nesqe/ck/MDfOP4gzx/4AgDBdlM4lbYlgbwnT+/wD//T2dYWK2K7I1wyDOFQ5+W
      7QEjhdaxQ2SPZkKqI/h3jxags9UpxsvXma1O3ZPzG+kdJLqfwux6/J6cH6Anl2Og0HFXaRTb
      8jSnF0ssrFapWbIe/FBvhif3FDjcJ4sk+8s3wLXw5y+K7PEsqC1BtQKeDaaMkxQHD/Q8ylBu
      N73pgW0/N4Bm5sjs+fVINp7nsbCwEHz2fX7n7TfIJpL8lYcfbb7EAwMDbb/Q1xfnuTg3wwn/
      ZKRo8p2wbWzQ1m1U6JpGPhn4gEX23fvATKH3HRXZYyQh0wPZNOj3JqFG1wz6M8IR7B7BcRzO
      nTsHgK98Ri9dJuP5nEumaTzJ/v7+thvAm+OjXJiZ4iv1Gj1ZASPgFtiWBvDCEwewV6fYt+Pe
      BFL8xavBCDB3XngAB+orUA8XwZ/HSLAA6XSar3zlK82/H33iNLPT0xw/KuuIvnRohEKpQndL
      FDgutmUN8J9eucwH12a5dHNRZO/6iqWqi+MJF6GJcOoknbpoekCB1kxxLsC56Q/4d+/9Hrb7
      +VVkzqVSTRKbBK+NXefMxDglqy6yt0dHKf3x93Hn55v7tmUEyKUTGLpOWpgPcHGuyntTZXrn
      KpzamY9+ADvILVbhNjI0HZI5SISf28Qf/dEfsbKyAsD7k2eYXphi9XiFXDIYvp9//nmGh4dl
      1/Q5xI6OTqZyeVJCKkrlp69Q//BDqm+/Q8eLvwREZYNW17k+NkFX30786jJVL8Gh/bfP620g
      k05gmjpmm+mMH4cXciBcIRlTKwyCbqB37hIewIB9XwRvupkM0w5efPHF5ueuC3l+8Oqf8je+
      /W2yybszf/284bHhvZhLqyQNWQPo+MYvk11fI/+lLzb3RTqSmcqxf+8wY5PTaCpFmhp1pUgq
      1aSs3gqu64EKtp4XfSHcmdZJ6FBM6yJ7ZWbQ0h1o+QGRPb6DfvkPUZMVvEefFi2EL89dZKmy
      yHxpjuHinujX8HMA3/dRSsmeAfCfz3/Ahx99yOGjIxRS0aez5ddep/raG1QfeYTME08AERuA
      U1vn+tQSI4f2c/XKBH4Lv17TtNuu5r/62AH06jy7BzpFPtw9XWme3tfJ3m7ZHF7VV1G1FfyV
      MZkP2UhA5x4olUNZlejH+Fun/yuOmm8w3LUHTWD/8wSpH3+os8hMvoN0IiE6hl8qg/JR5UrT
      Ppo8erWG79rMLZQo5g2qfoa0poGmoZS6bYGM33/pHBcvjvH0kws8cmRn5AuHIAgmLcDhW6Ug
      F6a+LjuGa6FWR9FWq+i+G3CDIuJPL/4hr1x4hccfeZzeXHsZTD9LUMrFWX4LM3cQXRCL8Hyf
      //e9MxjlCkeOHBG9wE/uPUB2rUw6IaOiqFoQiPWr1eZ7EKkBFPt3UuxvvMDtpxfW7CAAVrtX
      StINCoM0o0v5gSvUs8XHaFJBPkMlFEZHR3n11VcBUO46pdnXyXbswuw4AUBfXx8vvPBCW8eq
      Ow4/unqZnGXzbaUw74GyRu7pp0mNj5F9/LHmvm3xAnVkgx6zQ1iPyvMVa3UPz1dNWkQUaJli
      uG1Pk+iTB9CCxa8ud4P25HrpSHeSEowedwNL029z5e1/wrEv/E909h1ry2bfvn3s2xewT5Vv
      8d4rGR587IsY2b2Rz59NJvnNr/8yK3PzGMJ7WLEs1uo1lFKyKVC9hl+poqwNV/Q2keEaW1n3
      d2WhxtsTJS7Ny7hEmGkwTEgJXKgQvPyJbPAvgheoFW+Nv8b4yigTq+Oya4iJ0tIVVufPUl69
      IbLX9BRm8RHRyw/BvH+os0ghlRKvAf7wo7P84NIFVmuy96D65ls4ExPU3n2vuW97dIHClMZ2
      dUE/jorthVvZ9ENLFdCyPejFrV22t4SRgFN/HVKjwWcBvnLk6yRXs+zrPiC7hpjYc+LX6Nv9
      LNkOadxBgV9HKQ9N2AnEhe25+CjcO3gc7wQjlNLUWyQ1t6UBlGv2pm1UNKY9AkUUAFRlEVWa
      i0GGs+Hs78NkBR54UJQP8NS+Z8itd5BJ3r0wfhRomk6uU9gBAF71JrXx/5t673Uyw792F6+s
      fTx/4Ai5tTI9OdlIroWZZJq50YC3LRIMkBMKY+WSergV9jyJdNBzJ6VTIB3SRUiZkSLBrWhM
      /8TzV+WzYi3RnepBE1yD73tU18bJFfeK7JVyQbngy6gcSilWalVs1xXfg91d3az09otJkYVf
      fIFOIPfUU8192yaNqGsaSVP2ArvNSLBsDaHnBzGGHsE88AsiezQD9n8JnDHxGuB7Z7/DT9/6
      Cf/roX9AV7a7LZsPP/yQGzeCOftCfY5Lq2c5VnyAnnQgSHDw4EFOnjzZ1rHGz/8+l978LU4+
      9/fZdeSbka/fzO0nvee/JD0syweo2DZ/9z99l6xl88+PHhV5gS7OzfDh9CTHT54UcYr0bJbk
      wQNyYSwp/utvPsqDOzQxG7RBgfCEDcCbPYd3802c7CqZka8JDmDB2X8TTIEefkIUB7i5Ms58
      aZaKXWm7AYyMjHDgQLBmmK/NUHtjjS8/9eVmTkAi0f56xHPr4bYW8co3oOlJ8QhoaBod6Qw5
      zRCHAT+YmuDS/Czr9RrdAjq0MzNL5Sc/xduzp7ke2J4pUCZJXzErXv335xPkkwZ9edkCVM/3
      gaah5YXJJEoFNOgY6nBrtYAUt1ZfYRftLURTqRSpVNDY8vlDPL/nBfb2yhbRe0/8dTp6RugZ
      Oi2y9+oz1G7+Dlb/BOmd34psn0km+UcvfpPpqSlxMssvHj1Bf92hS0iHrrzyCtXXXqN67BiF
      Lwe54dviBn3n4hR/8tY1qnVZRlgmodOZNsgmZNMP5YRyeI6w9zMSUNgJ+UGxF+jXn/g7/NLx
      v8BI/3HZNcSEmczRv+c5DGEcQsNA0xLBKCBEOpEQxwAA3p0c593JcWqOMDe8wUFq8SJtSwN4
      6cwN3vxokon5NZH96HKdqXWb0WUZD1xLpIMAVkKWUhk0nirEmD5cmD3LuekPKEsp2fcYerqf
      9O6/QXLg61t/+RZwPI/f+tEP+eML5/GF8aC642C7Lr40on+LxhepAdi1Ej969Q3A4+x77/LO
      mQ9oh9dXrQfuz4pwBGis+qVyMMqpBS+xXREewANrDaz1YCokwPmZs4yvjLFcWZJdwz2HBuji
      aazre1xfXGRsZUkcED21YxcjAzvIJWWjmF8POlBV3+hII4rjFhjsLQIarucEGVptiOMmw6lL
      0tREwqpDBYMdeZOhgikTx7VCEpQjE+fFdTCUD8oP7aMfI2kkMTQDHdk9UCgqdmlbhWk/Dt/3
      xedPaDp/7ZFH8VbXUb4vCma9dOUjrk2Oc3p1hUGBNErj7fTZENSNRoe2aqyurrK6uozSsxQ0
      m7qvkdtCHDefTqKhkc+kRaKmjvIp2wpH6SJ7NxznNGTivGhpVCLICDMTqYBWERF/56n/jofS
      b7O7e6+oFz23/C4/mP7PdB7McbzrXhT3U+i4GIYmigSv1qr8s9deIV2r8wtPPEFCIG/YkU6j
      odGZzYqeoxa+9JrnycRxQePQwUNoRoZjI/twlEGujd9RqtkolDgSPF92KNke82WbHR3RF2HG
      4CkSJ/8iyUeeF50f3wWnEvzzXdFC2EfJ565A3a2hlE89xjokDrzadOgFukl66C9Gts8lUzy8
      a5h0rS72Amlo6CH1XnaAT3Y8kRpAIpWmtyUTp90lpesFD17K4Wj4/6VxAHwXVV1G1WXFHdD0
      IAtMT4j94P/q9X/KO++9xcGRAwx3Rc8I6073kTXz9KRluQRrixe58eH/w+FH/1tyndHPr7wK
      yqvg2zJhg4Rh8D/8wpcZHx8XR3I930ehxItoLYybaC3xk22JA9ihHpAt1gUKttIFmDd7Dvf6
      j3DMGVkgTDch3RlQIYTKcFWngqd86q7Mk2VqJoZmYGjtn//NN9/k6tWrAJSWrzJ+7Sz7L/4+
      2ZATdOLEibZrJauGKrYvu35fqcADtL7O4cOHRc8yl0phaDppU+aKzjz8ENqPfkzmgQea+7al
      ARSyyU3bqNjfk6EzbXBAWCWyGbwST0EUeE6QFCPMaPkLJ/8SXZVe9nbL1J1LzhpVt0zJWW/b
      5vTp05w+HQS+PKfGG6/+MU89+w10AZnPzB8m2f0FkoNf3PrLt0DVtvn3H7xH1rL41nPPi6gQ
      6/Uaru9TdWzSEaLgDViXLqOqFaxrV0kMBwIJ29IAlktBr7G8Lus9bq7UWat7jK9YnNwhWcQ2
      VsFCP6rvBXSIGBlhZ6ff5/zMWdbr6/TkeiPbH+t6kOmBOUaK7XF/Pg4jkaHQfUj08gOgG2iJ
      TnRTpgydMAzyqRQdui4OPn3p0FEK61VxJDj/wtfo8DyyLWS4bQmEJUI5lIRQFqUekoEsqS5K
      6LtXQh8+yguKZDi1oDEI4PoenvLEC+EzC6/x6uwPeX/xTZF9XHiV61hz36c+/T3hEUJ3uXQd
      B7xy4ypvT4yyLhTGMvJ5UiNH0FMbcYTtyQjzN6jAEmwEwoQ9eDgCSGjAQJBR1n8KekdERDiA
      fDJPJpERlzdyfHvTNiqWpt/h0pu/xdriRyL7ZsNXsg6gajus1WsslEt4wvdgqLOL/nyHeA3g
      1+s4o2OolljGtkyBnNAL5Ah7cE3bvI0ML3hplCd7eUCDgROwdhOJJArAxbkLzKxPs1RZbJsN
      2op9hcMkjT9jb0FW52x96TKl5SuUl6/T2dteTnArNCMN6GiGbPrRkU7zS8dPopfKYnnEJ/fu
      J7tWEivDrX33e6z+wR9QTqcpvBA4Q7ZlBDi5f4CkaXBkd/S5L8CuzhRJXWOoU9b7Nqc+wukL
      vgMffRfGfhwuhKOjGtIwqo6MjjFRGcX2LCYqoyL7vSf+Kqd+4R+w89CLW3/5FtDTg5j5QySK
      j4rsNU0jn0ySScrVtW3PxQoTaiRIHTqElkyRPLDBqN2WBnBjehnb9ZgUkuHGluvYvmJ8RUiG
      CzPBNGlGGFrg/tRlolgAZhg9jlvhUSqqpWkGqUyv3JVcGcUtX8Ze+onIvmJZfPfDD/jTix/h
      CeNB//HcB/zRR2dZrsqS4u1r11C2hX1jQxhgWxpAVyGDqetiWZQmh0MaAWzaSSOIOmS6grRI
      4ToinyygoZETNsLGiy9tAFZtiYWbP8WxSrLzmznQdDShF8j1fVzfC3pw0RGCtFBfKWkfhAob
      nmqRZtyWNcBQX4HOXIpCVtYA4pZIih0H8B0oz0JFXh/AUy4KhSe8hpPdjzDTO8fxbhkPaPTs
      7zJ2/v9j33COAw/+rcj2RnYPmT1/m/QuWUqkQgV5RUqJG4DrBQ3gTjq0d4JfKm3agoAO/Wc/
      eRVQXPnoHJeujbVl9/6VWZZKNcZmZVSEuIWyY8cBdBMSueCfsDjG4b6jdGW6GSjIstKW6vOM
      lq6yXF8Q2fcNP0Oh5zC9u2QZYaChGTk04RQum0iyo6OD3cWuWEkxsdBYfLcswiPToXcO9AAW
      c7OrZDscLG8PJnemQ2dCXaBUQhfRaRuvnKEpGR06pA8oPSmkQ9cxrDWwqrh2XVRo442xV1mp
      LXNh+hwP73psa4OPYaE2x4q1xGJtnv5UdH3Vzv6HOPTof0+ueFhMafasFRy7KsoKMzWN3/zF
      X2JmalpMhzb0cAKoZO8BjTyCVEpGh7aqJebm5ujuHaCjmEEDPDRSW9ChC9kUuqZRyMro0I0Z
      m6c0GR1aCxqmpnwZHRoTpRmghXRswTFO7XyQ8nSVvT37RNfwQO9jrO4sc7LnEdFCdm7sz7nw
      yv/BnsH/hZ6d0RugW7mONfmvcQdukNkTfQoFoOkGui6jtEMwffJR4mNoYaPTfF9GhzaTGR5/
      7HF0w6T31AO4viLVxozgLz9/jA5W2TMoK24ctzyvlioESfFpYX1ZIwUj3wRjMvgswINDj7I2
      WaYoiAEAfLTyAT+Z+QEDq70c63pga4OPYXX+PFZ1kfXFj0QNQNnLgI9vyaZgVdvmf/yD75Gr
      2/yfR46IKNH1sNeuC0cwPRfwl/XsRiwj0lUYpkk2myWdSmKYCVLJ9obC3/7j9/mTN69xflR2
      8xqQNgS9YwdaYRBjx4Pyk3fuhqwsjgHw7z/4N/z0+p9zdeGyyL7mVvGVR82VxRG6Bx8mUxii
      2B+98QBoRvDyaKYsEKZQ2K6L7XniRXDDfSp1oxa+/nWyzzxD7rlnm/u2hwpBcAOkb3DCCIb8
      pCH0Yc+cQ63P4Fx9SWSP78C7/wqufl8cCOvO9qCh0SVVqI6Jvt1Pc+KZv0fXoLAT0IN1j6bL
      GLkaWvPFly6B0+G0RRoJLv3RH1N95RUqP/5xc9+2NIBGUrxUFsVyg1tnefHIcFIeC54TJMTH
      SIqfWptAoZhek1V6T4RlmRJCWRKlFJ5bE0dRlVfZtI2KpGmyu6ubfT09Yk5X1bE3baPCt0NK
      jL3xHm5LHGCgK891YKC7/SDQ9evXmZiYAGCl5tLl15g6/zY/vhFc8tDQEIcO3Z4Xs7y8zJUr
      VwDwV+ZYTI9QqfaQejNgU2azWU6dOtXexYRVcOR9F2QS2XArk2YpuYHvuuy2nw/Qiumrf8jZ
      H/1jhnr/Zwb2PC84QjzXZd1xGF1aImdZeMICGXrozpa6URtzfy2z8Qy2pQGsV61N23bQ3d1N
      MlxjLFUdeuoeHSmDnlzQE+bzd25MmUyGoaEhAPzOBDsST0OqAzPcF0VWED0RiGLlKyJlaICq
      U920jYq9+YMYmsne/EGRvWOt4zoVXFsWCdbNPKCjmTJHRs1xqFgWVrUaBLIEi+CebI4JTaco
      zAfQ0+lNW/gUG8A777zD+nrQW+00lyiO9HDjwrssjQcnP3nyJP39/W0dS/vEh4iInREGuFaQ
      FCOcQuzrPsBiYokdHbIaaePla3jKZax8nZ256DLn9cr8pm1UKOUCPkpIx84nk+zu7iabzYmT
      4ktWHV/5VGybjnT0kdSZnQXAnZtr7vvUGsDw8DBOKGHnpRZYWq8xcmCgSYfYqgdvhfrEh4ho
      RoKFSx5N38gJFqpDf/HwV9GWTAYLsgZwrOsBrnVc52ixzWnbx2CGtYlNIRdJT+9AT3RhFkZk
      9rpORzpNXtPl/dinUGJtWxbBxXyabCohrhATO3B+N7hApRkoz4i9QN/78Dv8+NoPGVuWlSjK
      Gnm6U31kTVmR7ebiV1rkrzaN76zglmRFRtZqNc5OTfHW+BiOVB1ExXOD3iqxZFsawOJajUrd
      EUsjNkhwCaEbdKMJxcgJduvBP6EXqGStb9pGxTuLr3Jm4TXeXXhdZB8XRm4/ye4vkBJqg+ZS
      SQrpFH35vHgKFDcO0Jj7a9uxBmhF3Av3YhbIaCq5CRTdNhBv8O1Id6ChUUjJotEajbROWSPe
      f+pvMrfey/BI9OIYAF7tJs7qO9iLSTK7/2Zke8txqTkOXr0e5kULqtw0SJHCZ5E6fBijp4fk
      /g1ljshXsboaMjqVz8Jie0KvibC4V0Ja5CsmNCMJaGjSEqVamBAT8oEkODH4AL25PnZ0Dons
      G4k0pi7LqCqvjjI//mOqpUmRvW/No3wbvyaLYyjCOXyMiXxj5DCEz0Av5DE6O9FbimtEpkO/
      fy5Iqp6bHOfyjZtt2cXNCY4N3yOocihUhdDNoERqMicWxnp/6l0WKvNMrMjKpBaT3Zu2UTF9
      7fssz5xhbvSHInutIcgl/P26FsgaGrpcYbonm0NHoysrc4NWX3sD+8YNamfONPdFV4fu68J3
      aly8Nk7dtqnUXdIJ7RN0aNWSuNDo+U1Tb+7zPO+OlFbf95vfbcx8fMXGvi2Uij3Pa35XOfXm
      tl37zdDQeo7iVdZwFSAgY9XD4hxVuyKi8lbCugIVuyyjhHuhR85zZFTizD6MzG7M4mmRfcY0
      OdI/QKfjgO/jCtzJC+USPor59XUyXe29ujdv3mRpKZip1ErrTCeTnFtaJPXOO0DEBlArrbC4
      uEiuo5vnf+F5bt6cIJfeOEQrHVrTNPRwyLLdjRGgsc8wjDtSWnVdb35X0wIKgxbub/z/O9kb
      htH8rkqk8QgKZbRr73keFy5cCP5wLbjwY8YXLYyeQ01plOPHj9+WAv5xNHo9Q7/z774d6n4Q
      QKv5VZG9YSbDbUpGRzZ7SA58jWTP46KkGMuymFhdZtmy0QxDpAyxq9jFUjJFX6HQ9m8oFovN
      oKf98MMMDA2R2D1MYnAQiNgAMoUunnn6mebfu3e3W3S5oQsU5Wx3D8rdGAHahaZpFBsFlZUP
      x7/MwwA9fS06Q+0P5Q0KhJQK4YU8Jk/IZ8oVg4VfrnOvyN4tX6M29tvUuy+S2YNBlv0AACAA
      SURBVPu3I9vrekAl0WPEAV48dordLhRSQonMxhq0pfFty6q08aIIvV/NhiNuP0JhIU3Tgn+A
      plTwr2V/FNTCKVBNWKesQYJLCslwVhgBtqrCSLCzAvj4tqzCTdV2KFsWS9WK2Bv45vgNXrlx
      FUtaJKRRKLtl1N4eOnSjSLRwDdysFC/tOvR4CzighRAnQ0MSUSqNWPfCKZAn4xJ5oSiYLxUH
      04Npn6YLPWmEtxDE4Ziz05NMra8yV5bFUrRbxIO2qQGE27iBbOkL6DWEsWKUFwpLJEnxy8e/
      xYNDjzAyEF2VDTZXmpfAsQJNJqcu02ZqVoURUkEMXcfQdRKGIZZ2iUuJacihKH+bZVEa0wWp
      +ys29HgPb/Mdl939Y4MnWd9VIW3K1gDdYWEMaYEMPaxqownLvG5AWJyi8S/GO9CTyzOp6RSF
      blAVdoTbrg3anMJIdX3i4m6wQWOOXr/95j/nzPtnOHp8hN1deyPbl8O6AFHqA7TCd+NNgZQb
      uGGlCTGe8vF8H8d1I80EPvjgAywroNEvT02Qqlm8984ZsiFVfmRkhM7ONinat1hM3rIBVEqr
      rJWCuWau0ElnQUbAaqAZwhYO33HttQaHX6qNHxwlhm3AAfKVT1mozFZIdGzaRkUiHbwkyXRR
      ZK+nBjZtoyJlmKQTCXJp1UxsaQcDAwPNuIOTSbF392529/aRDGktqVT7axJNbyyCt/AClddW
      +OGfvcz4+A3e/UAop9164sYUKOZLJLZO5sBIoQsVGQIo4owCFWsjkCVB2Slt2kZF764vYCbz
      9Aw9KbJXXjgCuLLrrzkOFdtmuZEQI0BDS8iVpsaa4RR4Ky/QwK59PHLsMMvLK/S0mbRyJzQX
      cMIXSI+5hlD1dfAs/IpQleIuFMnLpwJNzXxSpq2ZSwR2OVPG51+ZOYNrl1mZfU9kr0IauFIy
      Rm8hnaY3l2d3V7dYHr3pwxEXTA/n/k4ba4BavYJlOTHnzQH8kMvgC9mccatEao0bLk2IUapl
      HSETZ40bB8gnOsiYOfEUyA1TMV2hPLuRO4huFkh0ymRVSvU6i5Uya5Uqru+TFDSCbDKJrxQJ
      IatXu0ULuu1VlMo1BgcH6cjLVty3gnQCkU0G0cNsQuq1jZkPgAoUJVRIqhOgGQlOyu7ncG4f
      J7sfZii/V2Qf1w3qVUfx3RLu+nmRfcIwSBgG6URCPJIP5Ds40NMnH0FCaUStRc/qlkdyHZvj
      DzzMwMAAhdyG2853Ld7/8BwAY9cvc/bCZdoZH3KZJBqQS8tccJYbTJ5sTyjpoeKV97kbSIcN
      QOoGPbPwKm/PvyJOiGnwd3RpTkQ4AirhjCBpGuSTKboyWbEsymKlzPjKsjwj7Ba45d14/aXv
      8tqFSXp6B3jy6efo7QqGXd8HMxEsIAb6B6hPzOMqheF/Uhy3lQ1qO4EmvO14ZJLR2aCtUyAR
      G7QZCPPatm89f4MCAUGV8obOvOu6TXLdrVBtWfB1m70cHTpOpVRm1QhyKtLp9rVSrZDPZLl1
      ERuzKWiryQSC/YYPPRKLdgOW7WB7HjUnYKOqNnvx1uewWqvi+D5V2yYX9uKRWMVhYQ2/tvFc
      bnn3H3/+l+jacZHXX3+TidlFTh4OKosr36O0tsrK2hpXLnzE7gOHMDUN/RbiuK1s0MYL7CsV
      iw2KJmWDZvA0Ay2Za9ve9zeYq/g+jemTpmnNNYVpmls2gIYwwJ7cPjqGOjG9BKVQnz6VisDM
      bJnFSdicqUzg/kxlu0T2qhFIEwrTZoF0wqQAJBJm267Qze9Bg1Omyd6j8HuasfHcbmk5fvUC
      F0dnOPbQ44wcO9x6NI4cPoJhGBwZGcFT7Q1l2VSCat0hnZANv834hXQRkSqg7ziFlpZp2oRn
      j2ELlms1t5IqMclQlDclFOct9IxgGCkK3Ye3/vIt0IilSLlAq7UaC+UyK5UqjueTEpTMjf0e
      NBpAy3t4y6vI5gukEgmWFma4OTXb3J9Ipunp6aEjn6fY3U1PT1dbZKKuQpqObIqUUBUiboUY
      VVvBn34fb+asyB60MB3SILZGRUw6lNR8bf4cnmextiBbxDYLDSoZnyqdMMkkEnSk0uI1QNxq
      oSocjRtbuM0IMLjnCC/uO4auR6f93grTi2XWqxbrFYvujuiLwEYEWFpftillIpQ0AWK7gxtD
      /p2mTHdCX3oHAP3pQZF9R+9RdD1BR49M1wc/zKnwZG7cRj6wNKEd4nPKtFvkA9yyAUSSDWwD
      seUsGtlU4qYfd+yMT4ZrJLJIo6DztWkA5mozHOw8Gtl+df4svu+wNn+u7foAjuNQrwcvvlOp
      U7cU5ZrfrLFlGAbZOxDTLMvivfeCwFvVttlRt9Fdj7feerOZ2H769Om2X+iEbmDhkhCWqdoY
      AbaZDCep9F6tVFhcCCK3dddnqeRgFhK45XBBA3R1bZfUuHabz+0joSeosVEuNSo2MsJkUxA3
      rFMcJRC2trbG1atXAfCdCmb301xdyGJUg2lUoVDgxIkTt7U3DINdu3YBYLkup5WPpsHw0C7R
      SOiENGbH80i0mYq6GdqmDXyKDcBxnCaLr25ZWJYdboML36onrFarrKysALBUcVi3PJyKQW8o
      jpvLRSDoNaRExFTgVh6QbARwwzm0K8xJiMunMkN1aiPRfiAuk8k0X2DfzuBVqmhmHrMQ7Eu2
      WSAFGnQYFUveUJoL0YAWzmy0lhnOp9YAZmdmmu6+yYk51isWBb1KdTVYA3R0dETSB40Kx3Ga
      4ryqvIy3vo5mKYxisC+djpJXqrHhLxBKczdHQSkPJmZORWyF4RDSUsst83fpFXSmM6zVa6Sl
      U/RGp9vS+f7MToFa0TCL4gSyLIu5UA3YL83izc5CskwiHezL5/McOHCgzaMpaMa8hXykRiJ9
      hMc/NTXF4uIiABMr01Rm6kxcmubDuQ8B6OvrY+fO9sR2jTACbQgqXAaI54JRjfrAMeoElywL
      2wuKbWcEjaCZEbbdhbId19u0jQojZgNq4B6l4wCtym7t3/JsNkt3d0DhPpo5Tn9PP73pfrrT
      3c3/3zZUvClc3Clg0PNr6Fqc5xDzGu5VUrzZEMYSSiPGfXSxHcgbCX1IH58dZmLZwoysuLIo
      yUx3uO0R2cf1pKlwHeXHkji/O3klrdiWEcCPSWeOmxFGU9bvbuQEy5A0UlQok5Tqk8a8lEYg
      S0mFAWImxdN88eX3simPHiEmY1kWlUrg+bJLJdxKhcR6iUQx2Be5AZTKJQr5AtXSKpZv0tW5
      9UK28eJK39+mPLo0p1g1Hn77vadSiuXl5eAP34PQI4W+3GxI7c6/AWwv8IjZrkUuGT3FVDKF
      akVp5ToA5eVrIvu4MHQdU9cxNLk2aMowcTyvmQ7ZDlZXVpiZmQHAnpnBnZ0lYRobcp1RLsCu
      lXjnvbN88dnT3BidBBSFUye3PMjGFEj2w51w5HCEdOhGr6VF6L1832cpXIDie7AUflaLzQag
      fH9Tet0dLyGmF0cPr12P8BuuX7/OXFgOaGE6jZ8+xZUJWPICSvXQ0BB79uwRXU9UeL6P6/u4
      +IE7U3AfGoJYluuK4gBNKnfLTCSyOO6O/m7AJpXuJEedulJkbkGHbqWhui3q0BJx3NZkfhEd
      uiUlU2KP8tFa+fC+Fv4u744PcrPAbziHb6FkR7sHG7pA7dp3dnY2mZKF1El2DHaT69xLvjuQ
      aC8UCu2fv7lX23RNbd9DaC6C+dhvuBM20dK1zfsb9m3T2s3Qc5Qw70yHvh1qpRXm5+fJdXSj
      3BXm/QQ7NK25qm6lQ9+SxqrJaKymHl5sCw02Ch268QiiiOuqFur2x+nQDS6JGeE3qI/tb1xj
      u/ati2CJvR4GA3Uj0fY9aLX32Ugqan2uW1Gjm9eqFIYeyqPr+ga9xTDuOCpuuoctHazkHjQF
      0lryOCKL4z737HPBHzvbl8dIhNTXhDClMTYZroG7Is4rm8IkjSQ1p0pSKM3SGL79tnLwPg00
      FsFCT55SwXOMkc21EUyT2atwJqJarmFb3KCNKZArLJBhxqRD3wVH6i2OFdUqnjJGXDTSQqM4
      AjajMQIIi+yFDcD1fTGloZBKY+o6mUQcfSc2PcJtaQCNBUvClLnQ3Jhu1LunDCd/eV0vHheo
      SacWPrLGCCJugHGFOe8CSlYd1/epOUKB3yiqEHcTdhgBtoWR4Gb/Lb33cesE3wU0RwDhj4ib
      EWaEdrrQfiOYeO/uoRY3EHaLYN42ieNu3kZFgwoh1RbVGvwXMQ8G7i2RAiyvvmkbFX5D2Eoq
      j97EvRsBYk8jG4vhlvdoWxrABoRU3rgpkaGiAq7s5bkbSBgJak6wlUASB2hFQxZFUt4ovIJw
      Kzu/rmkYjYIjEXrClZUV7JBWv7i4iON55DyfeqjxUywW22b2btChN9YQ29IAGsO+VBnODhfR
      lueTlzyAmJo2dwNx1wBu2IO7QmnCJhVCmFDT1FQS2iuChbAWXETb04G11VVqtbDA4Po6Fdum
      WzOwQ9fnbifC/WjEC9wtcoLvPuK5r+KfvuG3jqEs17SVRnL1TdvIVxAzISadG8CqLZHKCrVe
      Y66jkoZBVyYbFMgQvgi+Uhu0agEainANhTjY7hJJYibhxz9EPUDcESC+NGJcLk/ce+i5NXzX
      wpNOA2N60mzPY6VWY6FSFv8GX22sAiRQtr1pC9u8BhAvn9SmzT2ALCNsfn6eaqhGNjp1g6pT
      JW930J3rBSCfy5HJtKuS8cl81iiw62so5eFYa2TyMmWJONC0YO2px6i11hBVcH0fiS/rniXE
      GE1Kg7DEvSAjbPMB4i4AZTGAeq1GNaTi1qo1qnaFWq5GlTBBfQsezCevQY5GTrAZISdYKdXk
      6vgh30vTFJoXXeHC9xWeCv5JyXBx3aC3SogRN4CVxVlqfoKd/VsnWOQyCUpVi6xQHLeZjBhz
      CiQPhMl7reYlCFx4tm03R5BqtUrVrpJyM1RVsC9KdZQNefT2q0yWy2VuXA9o1L69iFe5gWbk
      MTuCuXRnZyc7duy4rb3v+01lD8tzWV5cRNM0lgqdTS5QI+m+HcTNC2lSIeKPAC7jkwuYePT3
      92x5kHLVRgGVmk1aoA7XnHyI38G7kA7YbDyyY6TNNFW7QjpCLGJtdZWpyUkAFuvzLNbnsNMu
      bjq4Fl3X6W+7gEnMe9BMKmr/+fm+31T2sFyX5eUVNA1WOoqbCG5tL4pjOlH0bAYv3DYgawC+
      Qnk2dR88T6FxZzq0rm8wKdulsbZm8lTrHpblUVMGFRUsYOqWFYEOHexTLVTeaHRo1WyErYSu
      KHTo1gIZDYn0re6B12LvhG5Qx3c2fkMEKnBzHaWElPJGIK31/BHsPd9HhbIorffw45TpO/2G
      VnEFCR3aD+MJvmXL6NBNaBqpZALb09F1DUO7NR260bI9XzXZgI19W9FYdw4NUegIZNnHV+r8
      +Mx5jp04xr7uoActFApbUnFroaqZqpRYm50m11Ej0R/sSySTIjq0rukiOnTzHulG21Reo8U+
      1UKFaNKZo1CBW9bQMkp5Y/7dvn2rfLyha80yqa3K4a3n2Oo3tOZ1SOjQRqEDb24Oo6Mgo0M3
      oZkcO3nqjl8pdnWRCiN0V18fZ35mksMHdtMXDtlbzV+7u7ubigiLRolscZZ87072DLdXY2tw
      cJBf/uVfBsC58hIfXv1tDvXuoDPcFw3x1wBazDhAXDdoXFmT+NBu8Ska4ipcemtroIKtEXau
      n5oX6NChQ83Pna/PMbtc5tDho5w6OhT5WHGpEFqYg6sJcnEDxF8DNCK5jieL5HYkiyh8OpIy
      ifeN914qrHXvCYVx0QyEbT8VItwK7TfmfnEvJKb9PYSpmfSk5BU7tZaMMBlaigQKcDeEsWKL
      2tlWuN3mQNjewSI3rurs6pNVOKw5wc2vOjI3ZoMMpyJEQZVSrK2FBeV8F1aWqNo+2cTOpidk
      O9tTyVljtjbFjuwuConoo0AjEUYsixIzEPczgSYlZpvZoJOL63i+z+xymZ290evkNvS0xHTo
      hh5QBF2gZDLJt37lV4I/PBv1xijnJquc+tZfiFlxXoaqW8VXPlW32nYDWFxYYHo6kFVfW7hC
      dX2SXNGjoye4j7v37KFYbLNyfMwJeNI06cvlMQ0jvsKfdBbXfJG2WRmuv5gjYRp0F2QVEgsp
      Ay3citCgEEsjwcoPRgH/7tRNlqDpRYoo7dL453n+pr9939+UG/tpw/d9yrZFqV4Xj5xGXEfC
      vaJC/KXnjtHJKsMDsilQNmlg6hq5pLABNIZ94QK0WShb+THC0fGQS+RZsZfEleIbc39dOnrF
      zGoKUhkb1eZlVAhJoZVavc5aqBJur61Tmp+no7OTRLhvWxrA7710lrfPXOELpx/j8HB0bcr5
      ko3jK+ZKNsPF6DSo5rxXmhCuG8G0x3BiyCvGQ92r4SuPulcjY0Yvtu2Hjd+PnREmpYNrzX9i
      cTBdAz/aVPjhhx/m4YcfBmDpX/xL3p+f59Fnn6X4rW8FxxRdSUT0d2VJmDpdBVlKYiHVEHcS
      ZkM16AcJYUqk54BTDf4J64zFzQdIhF4cU49T5KN1G9W8sQaQTZu0lgYgRWMKZMTJ62DzInhb
      GsD0Ygnb9Vhca5+I1Yq1etCDr1vCHjys0q4lZGsQND3o+TUD6S0zYuYDVJwyANVw+1lDQxrR
      /hhlRgI5rf6TwcRtaQCrZSvcypIxNlQhYsqiSBd9yg+mTzESYryYJZLiolmgQ6ru3AyECUfh
      sDKMHqNCTGuNMBEanLQW6oW4AcxMjHLp2lhb381ngmE7n47nPhSTABqS5FJp8kYSR4woqKEb
      m7ZiiAO5dyMnonUrtFfyIzSmPtK8kkaleFq4Q8K7YXP9+gRdgzuDNLWGW+02PXTdDnq9muXc
      kbl3OzQUFZO6JrL3SvMA+JUFkb3mq0BbUzcDYl+bx/B9f0PWsenB8DZ47VuwKVvtG2iyKdux
      b8gRshEI831XdP5N4rzt2nstv7XlZ7QeY0s2aOt3VSMjzMNXZvMc7T5TP4wA+y1MYmED0Cl0
      9VA0bEoudJh3LgL9/IN78UuzHNzVs4kx2i7sUBbd8pTInmTgNdETGZm9lggqTBpJdDPRtidI
      0/Vmh91Qh/aV39yn6/odr6fVvrmvpcSQrml3tG+dbii1IW3Y7vn11vO36HI2Bda2sjeMTdcf
      5NWpTYXythLHvXVRvY19umG0/0wbKtG+37QRNgCT4Z3drFR9diY2LuZ2P8RxfRzPj5b80IKG
      /z+XkikKqJCLr5yqzAXnOSi7AnYFzXPajgQ7to0V9jqu4+I6HrZtY5lhT+T7d374bNzT1kCY
      1uKT3+r3fPL/b34G7dqrjVeuRaGiffvmO3KL897pGK7j4ITxg5VyifW1dfqzOZKN64rwThlh
      VVK9UGjaiOMA3X076G7zuz/5cJyx2VWuTC7xZGd0H3bFDlpuRegF0jt2gqahd0RnogKb1wAR
      GtCevXuxwwbw8vwfMzM1w6OnHuPIwBGAT7VM7MexUSWy/fuv6zrJkLbuuTXm5m4wONhPMvUA
      AIkIlRqNsDqMrkeLAzz73HPNz2Ov/4S1q1d5/Nln2dsdPZ6khfR8rYWKv02qEI35o8y6QeEQ
      q0OH3hs5EUyG4eHh5ufi1Q5mlqbZt38fBwbbLc+6gbj6qJ4bjIJehJzg/v7+ZsqlvazzbuXP
      OXU8S+7I05HPH8zlfZSvRRLGupvwVlaDa1ldbe7bFjfoN75whIND3Tx4sP2aAq1oRP6kZDi/
      vBB4HyoLIvuACtGgQ8jewLoTuIDrQl2e5hoCoQswprit1sgJFrpBG3ToDW2f6Ihbb1pPBz1/
      6wiwLQ3glbM3uTG9wtjsmsh+o06w7Px6rieYL+f6ZAdoatnIM8PiqkNLyHCt0PgkFTjaAcJ1
      jy5zZTeiwKYuL5LXuhCXwAgzDBtb2KYp0Gq5jq8UaxVLZJ9L6uFWKMw6eIr0C/+QzMlHRfZ3
      AyqmOl3cOsGxefyhGAG+jEukCN2fIJ4CFUJJw0JKRmlxw4KBjS1s0wjwpYf3sXewyNE9vSL7
      elhZpi6sMIPn4M2cxV+6LrNvTH9Q4ilQgwphiANRMREzp1jTQzqJIaOTNKZAcbQ9V2rB+mWl
      KqPUJPfsATSSe/c0921LA5hbqbBWsajWZUSyhheoagt7z+n3cT74t1iv/V8i+yZicFhaFQ3a
      hZlIkE6nSafT1I0a4/Nj1PVac19iC1UM23ECQa1qlbXVOWZnp1lfW2jucyIoKzdLLEUYgZRS
      zXOVqxWmFxeZnpujWqs190fBRixaqDI+NgYo7NGx5r5t6Y7O3ZhjpVRjbHZVlBFWzASX2ZkR
      zn9TwTm1ZPRzB4Z6kEyjmzEWkdFl/fbv38/+/fsBqE4uM2ZfYc8DQzw19IW27E+dOsWpU4F6
      x7mfvMNbK9d5/OTDjJwWKGM0p0DtN5pMJsOLoQrHYrnM78/PkKhU+cWvf53kFo33VmhQIEwh
      nUQvFgENo2sjC25bRoBcJlg45TOyBdRqLXBfrtXkcQC9/yjG3ujuOyBcBBshI1Q2mW6IYaWF
      jNSNConxqMDyxUCDDCdMS9XaC5zdCV2ZLBoaxbYFhTcjuW8vWjZDYvfu5r5taQA1y920jYps
      SAbKCsusKruCqiyg1qdE9mhGQKQz02I3YDHbhaEbFFKyrLiGF+eT5Ih2DxAvo0s1CnMIYymF
      VJqeXJ7hYhemIXuOi5UyCsVSqBgYFdZHF1HVKtblK81929IAvvXMCId29fDQIZkstxNygWxh
      hRm/NIOqLOLNfySyR/lBUoxnixNCylYJ3/ep2bKHt8EmFWqZEW8E0fTQ82LIPDBr9RoL5RJj
      y0s4nuweNuMA4oBoY3sX8gEqqwv8+StvtfXdl965zrXJZS5PLInO1ey8RNaAF7pfXZkbNsgH
      cGIlxa9Ul1EoVmorIns/phu0kQcgnkL51uZtRKiQBi1VdoYNmX1pRpheyG/agnARrHyX8alF
      eos5fF+h1CfFcVvhuh4KhePI6NCFZPDqdySFdOhGMrbniuzxvOCma0ZQ9FuLfoxGKqSmEF1D
      b3KguRX9hsbIoZkie181SHGG7Bl4XrMH9jwXyUSq8X65ESjQrXBX15rbeHRo3yeVMpkem8Y6
      cpRM8pPiuK1oDHmuz5aCtrdCNey5K67MnmRIgjLvLIh7W+hpVCILCTCTKaG8Svj0dU10DXNW
      oO8zb01z3Hwwsn0iGfR6iVRedH6lNyLJsmegG3qgDo3CMEzZcwhhGHcW5b2tXSZ4D4x0umkv
      ugrNTHLg4CH27tvfFhe7UeFdWiUydqX4xgsrDUL5Lji1MCneFR2nkcyeECe1xwvlWtXFTdvI
      Zzdym7ZSxEkH7khn0DWNfFKW2Zc6cgSju4fkwQ0yYqxFcLuJCH3FHBoavcXoVGiApBE8/IQh
      dMGFZYHE4rh3IQ6QDNMxk9K0zGYkV2ZuhIoYDVp05NO7pXC7Lju/rmPqOinTlOcEh9MoR5jb
      7a2s4Ndq+KsbnLRt8QKtlGoolDgp3oipDo0RZnHFqhQfD806v0JZlbjwQjZqgxYdGS1rCNH5
      G6oQrhuLDarYIEdGhXXtGqpWxbpxo7lvWyLBDxwcZPbmdfYNtqlD+TH0ZhP0Zk16c8Iq6z0H
      Sb/wD0mfeFhkfzeU4eLSoTcCYbKHn8x0AZDKtJvG9LHzG8EaQhMq06VMk7QZUDukdGbLc1Eo
      bKEqRO6ZpzEvXyZ3+nRz37aMAKPTK6xXLbEuUHfW5MGdeXqy0oI2Gnp+ACJUSPzYAcJssGgZ
      YbeEsPszw57XlPbAYcPzHNkIsDEFkukSOZ6P43nUHEde61ggjdgKd3YOb2kZd3EjL2RbRoCl
      9Rq+UiyXZDd/as3m1bF1uvda7C7eg2mMnoAdD4G1EnwWoFko2xAWyhZZtdg3pBGlUzAtHpWi
      mMmwo7OTYi6HKREmIH6VSHd+HlWv4S5uxKO2ZQRIhqoRCVP2w71QGkOqa+VXFqn/2d/Hee/3
      hAdwYeEirFwXUwHyISEvLyTkuS1F8kRoujGFj7xBARFSQcqWxXy5xPjysrgH30ioF5njLS8H
      26VtbgCthdIk2F1M8fTeTvZ0yTwo/vIo/tJ13NGfiuzR9KYsitQL5PkuGnJluNjCWjGr9OCF
      axdfvobRNa0ZzZWgM53B1A1yCdl7YPQEifRm70ZeyrY0ANsNFi22sMKLpmkYunwBqCWzm7aR
      oTywSmCthwn20ZFN5gCNnNAVe7DjKLqmc7DjqMg+doGXBgdIl01BTT1Ih0waprgHP9jbz2Ch
      g460cBrcrJi5cQHbsgZIGI0pkKy9OZ5iseLgeH7zWFGgF3dj7HkK88iX2j+n4/DSSy8Ffygf
      dXOZmVWHiT/5QXMU+OpXv9q2NEjNqaJQ1CKoMrTi6vpFfOVzbf0iQ7ndWxt8DHq4dtGkgTgv
      HheoYtuULYtapYLnKySvwpnJcSbXVpheX2N3V3RvVqM22LbXCHvqxDCL06Oi2gAA1xZrvD9d
      YXChxvHB6D2oliqQeuI3MFsqV24FwzB48sknw78UDNaD7nPfUzT60Sgqc2ZMdejuVDBsd6Vk
      99BvKXQtgZbsRtNMdGGhviApXsf8mFpcFJzaMYQ9O89AQbaOMjqD0lJ650aJqW1pAG9cmGR+
      tcLVySUeOrQjsv1QZ5LhzhS7BMUxpNB1vVmnGIDuvxzreLUwDlATxgEaEGsrx8wJNvMHSe/5
      ddLDj4vsDV3HCKdB0p+QS6bIJhLiGgteWPTQX7sLkeDRqxd547W3aEcjYKivQDaVENcI60ib
      jPRn6Ezfo4Tyu4C93ftIGkl2CtXpHuh+jBeGf4UTXbJgXirbG26F0jBoaEZePoVSjaPI8d7k
      Ta4tLbBUlcUikruH0fN5Ers2noH4jert7aXqJTCVwvPvTIdGqZDIpmRUXsBxZRTYBjzPw/O8
      WCl5cXB98Sq2ZzO+NEpnKnpEfKp6k3cWXmW4PMSOzK7I9p7nhlsZJR22eZAUuAAACntJREFU
      VoO+E2w3UKV2fR/X9dAFA5Ed/gbLlv2G1OnTFFMpzKNH46pDu5w58z4Du/bha1ozsHG7OfFA
      d4Gejgy5TEpEY725UueNm2X69rvs6YruAVC+h5p8C60/iRnqcm43vnHiV/hp9aeMDB4X3YPR
      8mWW6vOMlq8wXNgb2T6Z7gA0UulOMRVZ12U0ZNh4NxRgGoboOKnQJp0U0toBI7X5HRSrQ//C
      V77a9rebGu9CJ3TcXttfuIT91r/Err1H6lf+WaxjSfHE3i+QXsuTFbpij3U9xJXcNY51PSCy
      zxaGMJM50vnoazAI5FD86hi+PYyejO6BMfQNZTjpPKiYyZIxE6QjiPK2wi+XsS5fxh8ZQQ/l
      EbenRFKpRrlqYzmy4TNlaiQNnZTQjar3HiLx0F8j+fhviOx/FtCfGeSJ/mfpTcv0VVfmPsC1
      y6zOnxXZe5Ub1Gf+I/Xp/yCy70xnONI/wMO7hkkIg3m+UnjKFwsDlP70B6x/93tUX3+9uW9b
      VpUHhrq52lugIyfz4qzVPcq2x3rdZbAQXVpFM5IkDn0FfaB9N+jPA27evMniYpAAM3F9mYX1
      DJeuzrHmvwfAwMAAQ0PtLcqNzC4SXY+T7Hlu6y/fAlXHZmx5ifm6had8TAGlomrb2J6HLSx3
      mz39BJnxMdKhVhJs0whw5tI0VyeXmV+VKSIc7Enz9L4ODvUKqzx+TmGaJqlUilQqRd/OU+ze
      maN358nmvijzaM3IkOj+AmZBtobSGv/FmM42FeGErtzErl3kv/xlzJ6NWMq2jACuH+hqel77
      F14ul6nVAvboSs3lnWuzFHtn6Q4p0ZlM5o4FJizLYj2sBq7sMvMv/xaFxWdJH/06ELwcXV1d
      wl/02cDOnTvZuXMnAEod44mnv4FupO6JJ8zQNbqzWbKGKY5lVMMIbtW26YmXmdnEtjSAF588
      TM5dZvdA59ZfDjE5OcnY2BgQNIDl9RrvvvtuswHs2bOHo0dvz4tZXV3l/fffB0BZZez5m3x4
      9hxmNZhDFwoFvvCF9iQG7wZqTo21+qq4TFRcaJqGcQ8z4jKJJP/wxW8yPTUlJsRlk0k0IJOM
      V220FdvSAE4dGECV95JOtn+6kZERRkZGgCB6WbF9csn2teUHBgZ44YUXCA+A/6Vn0NLFjZKp
      24CXX36ZtTDq+N7kO4xOjDJ+4yaZUB7xqaeeavbQP/tQ4NVQvisutZpOJMTpjABfO3KcnqpF
      T/Yudf9sUwPwfB/b9cS9n6Zp5FMx6us2MsK2Gc8880wzONg1WuD9yTP80umvkwkz05J3sSf7
      NDAzM8P58+eBIBNs7MIfMHXjNRKdwSKys7OTxx+XUSMk6MsX2NlRFI+gfq2GMzaOOnYMLXSl
      ihvA6uIsVT/Jzv6tfcK/+6cf8uNX3+Z/23NIpA79WUW6hbb7pWNf40vHvnYPryY6isUiJ0+e
      BIIGcKjrHImuY5idwb4oRfIg6AjjZLa11hhotxHcuHGDhYUgBbL29ttcffU1qsvLpI4F02dh
      A3CYmlsjgYvd382t+rGXX36ZlZVABvDdD8aozM3xve/+B/q7guHrqaeeYteu6CH9+9g+ZDIZ
      Mq1KzLv+XiR7x3G4fj0oSuIpn3/95htkHIdfVRtFV48cOXLHl/n69evNOgbnZqb46PIlzITZ
      lEgfHh4ml7v9lCibzVIsBtST7P4DJC5eorh/H2a4T9gAPJKJDBksXLhlA3juueeaw3/v/pu8
      +dEUv/aNR5pS6XGUwT6PWLWWObt8hr32bjqTnw3vlVKKUilIpvd8n3q9jpZIUFpfb7sHr1Qq
      WFaQg1AulTDyOUrrpSb9xttCIWJwcJDBwUCUWR0+DF/7KpqxIXOvKRE/VjF69RJVL8GxkYNo
      4YWIqrDfx23xzjvvcOnSJQAW6rOMrlxlf9cRetMBJ//YsWM88sgj9/ISI6HuOOiaJiqOARva
      QsktqstHgbABfBL3G8CnC8urc2P9Mgc6Rkga2+fJ+nlH7AaglML3fXzfbya/S3Cv7Ru3IU7P
      cq9/Q1x8Hu9h7Im4pmkY4ZAU58Lvtf3deHj3+jfExefxHt61u327k87MTIvtJ8eu8dGly1hO
      sNBx61XWK7cW12q1v3TpIgrF1YsfYd2mtGq1tEbd3mCnatoneSrjVy9TvYV9db1ErbzMamVz
      fu3Hf8P81A2W121qpUWujc3e8jruZA+KmemZLe3uBKu0yFJ5I29vfn4+wvkB3+bS5fbKy97q
      Htq1dS5cuMDMQnuFQW51DQszE5w/f55SbeN3VG5TJukT9r7L5WvX8awyi+ufFCT41F0xc/Pz
      eHaN1apPR0anVC4xMDxCb+fWYfnV1RLFgR1U1pa4NjtLV7GHiZlpunoGObx/+LZ26wszrOza
      w9TkDD1DQ1y/OUHXwC4WJ6/Q07+ThaVVioUMS6tjdPcNsnfXJ4Nkynepu3Umb86S9NcplWvs
      2DXM5MwcHdkcPR2KdT1N8Q56pWXLx6tOYGoWdSvFxNg11urQmUvRnU1gZ3royt7Jl66Yn1/A
      cV0yQC0B5aUVCj07qa3NQbLA4f13VohwysvMlKuo/l5q64tUKmUsy6IzZUDnIB2pO/eBC5M3
      qbku1UqJtYqNY1UwlcvC0iJDhx6mN3/nV2h9fgHSOXq7CoxevUzNN0kbDpWqxb7DJ8int1g3
      Ko+55TLHjx3ho0vXSOCRyBW4eukijz31LF2FLfIrfJe1pTnmMyYlL8Xc+DXMTAfZlEHa0D5N
      NqjC910MXWNlZZ35mSmqns7IyF4qq+1Jg+iGSS6bZfLmGD4aruOya+8BPLtyx4BKT38/Yxc+
      pDiwk/LaCrZjMzU3TzrXiVarsnfkKLl0igOHD6OsWyepV5ZnmF91WViYwdcTHNnXx+zsCr07
      h1F2nbYUjjQNQ3NxNBMDn5XVVWanpkkZHhenVui4U46zUijfR9MNKuUy5bV1KrbH4ZGDVJfm
      mJpe2tIFqJTCcX0M5VKz7CY5MKm5XJtfp7DFyw+KybkFqCwxObtEpVZnfX2dSt1j70CRWhs6
      T11DuxnuKXDh/FlG//9KzmU5bSCIoge9RiOBRiAEyBgwGCq/yW96gZ1AHOOyA+EpkGCUTbLI
      goLcfffqdvfi3OrZHK1PaMNm0IlZLm9LBxeFRp/P6FNOIcr0Oh3uu13C8m3p4Cjp8fPHlGO6
      QaomZCn5cc/baoc5Ho/HN3X5bxVMnp5IekOKPMULqsRRhJQS07QQ4jpFNP8kNsOKz2q9p95s
      sJh/p9ZoU/YuXxDTcrCEy12jhusK0kNOHMeEQYVqHDF9nuCrCM+T2Jb5D7H9q116Yjh6RHmC
      z493VgeT4cMdwnURtoX0fGzHRdiXN1jJMFBlF9ur4UsB+kRZ1Wi3WyyWa5Jm/WItaF4mExr3
      XSx9YJtBsxXjCRfb8XCdAuEHqMplCHTcrZgtDoz6bd5fZ/hBjapShIHPr21Gs36FJxQFjlth
      MBzC+cR+vcTxFb4Dzy/fCJP+1SE67tZMX+cknT5KmhiOR7r5ZJtZPPRa1z9Flwyckubr7I3B
      6As6XbHLwCFHWxJ5g48MwyIMfGQQk28+cFVEEodQkvwGIZDyyk8pFfEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Biểu đồ thể hiện xu hướng trung bình lượng mưa và gió theo tháng' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Corr' width='192'>
      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
      6G7ddj73QwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Mô hình decision tree dự đoán tốc độ gió' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Mô hình linear regression dự đoán tốc độ gió' width='192'>
      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
    </thumbnail>
    <thumbnail height='39' name='Tốc độ gió trung bình' width='84'>
      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
      1ZiUoRrzP2wIa5IYmZHeAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='WIND-DASHBOARD' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOy9aZBk13Wg970t97Wysva9uqur924sjY0gCIk7QYmUxJmQrNFYHsc47LAm
      wrIdcoytCYU8CoVpjUdjaaQZURpqGYnkUBYpAiIIgAAINLZGN3qp6qqufV+zMiv3zLc//8iq
      6m70DnRtXfn9qsq87737Xt7z7rnnnHuOkNc1hypV9ijidnegSpXtRF7/w7RsLLs6GVTZW2wI
      gGU7GGZVAKrsLaoqUJU9TVUAquxpqgJQZU9TFYAq20o5u8Kf/9Hv880/+3MKqrEp1yik5vkP
      /8//zcWBMT68yhXW/QCaYVUXwVW2FMe2eO3579Jw8AnkwiyTKZvPffqTCMJ9vQpvvPBdPE2H
      OXXy8A3nrgpAlY9MNrXM4tIKAIIo0dDSTijgRRAE9HKOyakFug/0Iq/pGWohw8xCin093Ruq
      h22ZTIwOYQse9vXsQ1wboJapMTEyiuKP0N7ewvq4nZ8axRtpoCYS3OjH8twU6Wzhhv7VNrZS
      G/EzNjJCfVs3QZ974ztDKzM7PXXVDFqlyr0yeuE03/7Bm3R1tGGZGjPTczz71V/mC59+ivzS
      BP/xD7/Jb/3+vyO0NtqT04P86V+8zO98/bc2BGB1dpBv/NGfgAO/9lv/Fy0xPwBGKc2f/bvf
      w3DX8Bv/5+9QF/YC8NJ3v0nHU7/ITz159Go/+s7SNzSNoeaZmF5gX08PkiDw6E9/mdpgI3/1
      73+fn/sXv83x/Q2Aw9C50/zNX/8XgvGmqgBU+XhEm/fzP/z6rwEwP/Q+/+b//Ssee+Kxuz7+
      8vkPOPr0FxAWz3O5/wotn3rk6pcuH72dcX784zf4xZ//PLfSjD7xxa/xiS9Cavoyv/tv/4L/
      5n/8dfxuqfKlkbuubWZxjD//82/x8//813nk6P7qIrjK/aO+qwevXSKTLd5Ve8fSuXRpgGMn
      TnLs5En6LnyAc60WLoj81Jd+lsF3XiGRKd2XPl549zT1vY/yyNH9CALVGaDK/cFxbKYuX0Rz
      hamtCWAugmWqvPS9/8L6yzifXLjumOzSJAnVw/6OBqg9SfZvX2Elr1IX8my0CTd08dixdl55
      +XX+q6996WP3M7G0REv74xuL4aoAVPlYrM4O8W9+57exTJ10tsjP/co/I+yRSAECAl6ff0MA
      DLfrumMHLpwjXFvH5NBlcCzCPoeBwTHqHj9yTSuBZz7/Zb7+9T9g+TOf+tj9lWUZVdOv/v+x
      z1hlTxOMt/Lzv/g1REmmvrEJt0vZ+E6U3Xzyc18itPbR3MA7nBl8GQDHNum72IekRHnj1Vcq
      7T0B+s5/wKeuEwAI1XfwxIkuXn7ptY/d346ubl54tx/D+iyKJFYFoMrHQ/H46ejqvufjislZ
      ZpIGv/G7/wsRb2UYZuaH+N2vf4NMycB7XWuBT37+Ob7+u7+PIlt0fIz+Hn3ip/jxq2/y7e98
      j+e+9NnqIrjKR0eUJBRFufmXgojL5frQRxIul4IAjA5coqHn2MbgBwg3dNIUERgdmwGE644P
      xtt56tFecgUNSbr5sBXEG6+JIKC4XYhrDgaXP8p//z//BmJ+jq//q9+oOsKq7G2qM0CVPU1V
      AKrsaaoCUGVPUxWAKnuaDQEQbhlpUaXKg8uGDcqliLiU6oRQZW+xZx1hRc2ibFTNvnudPSsA
      mgkdUd92d6PKNlPVearsaaoCUGXHo2kqtrM56uqeFoDpsSsk0pXNG45R4v0P+nAcUAur9A2O
      bmzOsK0CV65MVdrZJmPjk9zwezgWg4NDN1xjYGAQbJPJmdlNvJOPjqUVmFlcuadjBgcG7tDC
      ZnDgyk2/MdQiU7MLN/0OHHTd2Ph7YWacqZkZPjjfz62yduYS08yu5HFsmyuX+8iX9Zs3BKam
      JjfOPTs1gWpYe1sA+gcGOHvmDA4wcuF9Xn3vPOAwO7eAaJbJrj1Mx1GZnl4kn8thOSKKo5JX
      DXRdR1PLFMsqODZT09MUC3l0w9y4xtT0FAgCXrcH2zLRdZ1cLo/tODiOQyGfwzAtcBzUUpF8
      oYjjOBi6jmUZG7Hrlf9NVE3HMg1y+fzGW1EtFykUi1iWja7rGLqGbloYurZxPtsyyWVzmJaF
      Y9vkcjk0w0QQZTwuBXAoFQuU166n6zqlYgFVv5qqxHFs8rkco2PjOI6FrpvgOEz2v8dUsrJj
      yzINLp57j9d+8iZlw0ZTSxRLZaCyAX58bJRgJIrjVPqaz+WwbLtyTS3P8z94kVy+gG2ZJNMF
      spkcjz3+KBKVa5uWtd4b8ukEP3n1FS4NTlDKJjEFmfm5hev6W8jnKJVVHAc83kqMqV7Kk8yp
      uGUR6V/+5m/+1n0cU7uGsuGQXJhHEmw6u7v54PIQIbfIwf3tvPN+H7WxEJOzi7S3NOHYJU7/
      5DzRqIcLA+O0BA0mC14uvPkiyG7OvfM2LT29nH/3bYLhCGfOXuBAzz4ARkdH6enp4s033qXW
      VeLv3xnGY6YZX8qzMj1ETjW58MEFOrs6mJyYILkwxWzaZPjsW5y7fAnBFaahNsobL73A2Yt9
      2LKHwYvnAYuBkVlc+ioXRxfIL1xhWQ/xwRvPc+lSP8FoDWfPXsBS08wkNYYvnUFQXKiGw/DF
      9ygYAqqqEQvYvHFmHIqLTC7nmRu+hBxt4aXvfQtvMMrb777PwQM9gMMbr76EicLU9AyHO6P8
      8PQIvV0NvPLWOZ585BiOqfKjF1+moaWVQlGnLabwzqVx1PQCyZKAoOfRLPjg/EU6G4N8++9e
      JuyXuDA4TXdHC6VCmgsXr1Df2EApNc9CVscprWIoIfrPnsZEwrRFQgEfsyP9DMykCLlMIq2H
      WBzvx+ULMTs5TktnF7IocOb0q+R0h/ffeZOOniO889abNNf4+MnZQSJum9mUurdnAICjHbX0
      jU0jucIA5BdGiHSe4ODho+RXlzfatbR3ceBAL6Z6Nf2G7Aly+NBB6iM+VAti9c0cOHAAGeuG
      66zTua+HAz09lAo5RsYmMNQyoqOTyWaZW1hG0zSWlxOYpsGnv/QLHO/tBMA0DZ79wlc41hZm
      ejlDWTXQ1CJDo7M88cSjtDU34NgOuinyC7/0TwiYK2TKDoajUMqlaGysI5VaxbIdmpqayKRT
      6Ia1kShqfHaFUw8d5anHjtDXP0qopp7eAz14XOtDxKGoOxw+eIBYNHTdPfn9AQSgvDKFr/kQ
      Pfv34fcojA4Oc/LxJzjx0CPMToywOD9LNptnOZG45pn2YKoVNTQYiVJf30BnewujIzM8+tgj
      PPrICUaHLlE03Rw62EtzQy0Aw2OV++5sa0YAUnmNo4cP0hnzM7taOV8qr3HiyCFqwoGNvk4M
      jnD40VMcfegxlmdGqgLQcOAE733vrzn40MMABBq6WJ26zNL8DG5/ZFOv3VRfS019MwcOHsTK
      JsBXQzjow3FAcfsJ+K7GtituHwGfB8kXJRb00NbeTs++LprqwlwZnmBufgEHCIQjuCSRaH0b
      HgXa21rp6mzHE4jQ27OPgb6LCIqHg729jF65vLGWaa0LMTg2w4WLQxw40HmT3go4epnEygqJ
      ZBrBHcAqZ5mbmaKkVVQ+d7SB9OwIiaUFciWdzn0dDFzqZ3x4kLrmDuYWErS3NcMN+dk27hLH
      LrOaydHRXs/AwAhXBgdp6zqIQpmlRIKVVBqAhtogV4YnN+476BaZWVhmOpmnKVIxb7sEi/ml
      BMuJ1MYV2va3M9x3mZmxASL17Vf3A+w1VosWUckkEAiSTq8SjUbJ5/MEgyHUUo5EKk9razOi
      AI5jUizqBPxe8oUiXpeIgQtTLxMMBikV8rh8AcrFIsFgYO08lcRNlb8D5PNFfG4ZzZHwygJF
      VcfvdTM/N4svFKMmHGB5cR63P4Qsy2Bb+ILBjTdUsZDH6w8iCqCrReYXEzQ0tSBhsZJIkJgd
      wdP6MC0ReePapXyG5VSOltYWHL3M/FKCxpY2FMFidnae2vomAh6JfEknGPCSWFxA8gSJRUMb
      95DP5wkEgggCmLrK3GKCSCRCJBwklVikbMqEgz6CwcpbtpjPkC5ohAOVzzKpFcqWSGNdLWop
      T2I1TyQcJODzUFJNAj43+UJp4/hyIUsyp9LaVEcqsYQleamLRbBNndm5Beoam/G6FXAclhbm
      ULw+fP4wHkVgYnyMuuaOjQRYpUKORHKVwcuX+fQXnkMrrd1TJkWubNHUEN/bAtAW8d654Q6n
      kE0xMj6F4gly+OB+xPubV/C22FaZkZEleg/ebMbYeiZGh2nrPrCRiW5hZoLFlVVqG9pob667
      6TFVAaiyp7kuFCJVNCjr5q3a7npEUaQp7L5zwyp7husEQDMsPPLmpKjeCRR0EagIgO3YOI6D
      sIUqQ5Wdx54NhnM2ybW+03EcB9u2sSwL0zSxLAvbtjc+BxAEAUEQkCQJURSRJAlZlpEk6YF7
      YexZAdgrrA9sTdPQdR1d17GsW/spbocoiiiKgsvlwu12I8vyrheIuxIAQ1dRNYvJi2+REut5
      9qkTt2xr6iqmI+JxuzB1jZJmEAoGbtkexyaXyxMIhddMjjb5bA5/KIwk7u6Hu51YloWmaZTL
      ZXT91vEx98K6IGmaRj6fR5ZlPB4PHo9n1wrDdQJga6v863/12+TLRSTFQ23HQf6nX/sVXvjO
      dzAd6D31DJ/q7bjlyeZGL/OD73yXjFjHr/+v/5xX/vY7qBac/NQX2Ncav/lBtsEP/7+/42f/
      ya/iVWB64Cxnh1b56lc/B9VtmveE4ziYpkmxWERV1U1X80zTpFAoUCgUcLlcBAIBXC7XrhKE
      6wRAdNfwf/ze1/nhN/+A+Kmf49HDzViGis+rMJcsVd7kjsPIxfd44/Q5jj/9GU6d7AVgeXqE
      H7/yBo4gcOiRR3Fh4/G6SSzlELE3rmEZKq+98ANmlrI0tXfz2S8+Q22sDlmB5Nw4b57+gEB9
      O6btIEtb+zB2K+sDv1AooKrqtvRB13VWV1dRFIVgMLhrBOGOoRDvvPAdkk4Nn3r6Yb75h39M
      enGUb/3ta3zmyz9DfazicbRNjW/+8Z/y0Cc/zaE1N/r7L/0dC2Ufzz5zir/6oz9Gsypvo7Mv
      f4/prMTnvvRTnHvzbRwc+s+dx7Y0/tMf/xkPPfMZfNoCP3jx7U287QcH27bJ5/Mkk8ltG/zX
      YhgGq6urpNNpTHPnm9TvKACzcws8/vQn6T50glqXzvTUDPsffpKOzva1uA4w9SJSoIFjRw7Q
      UF9RdeZmF3ns6afoOnSM+pBDvlyZBZbmlzn19CdoaWvBq1ydgCy1gO2v5fCh/TzxzCdJzMxs
      xv0+MDiOg6qqJJNJisW7K0ixlWiaRjKZpFAo7GiL2x0XwUePHeV7f/VNjnTFyCq19B4+wt//
      3b/lFZ+BPxLnycdPorgD2IV5Xnj+hywOnCX+0Bc4fPwwP/jr/8z0gQaSRoiIv6LPHD/1CH/y
      B7/HOx2NLGWvVv2QfGEiTobvf+8FEsPnOfCJr2zeXe9yHMchn8/vyIF/Lev91DSNSCSCJO08
      nfa6UIiFjIpL0pkdGcQTbyce9eM4NqP9F1hKlXjo8ccIeF1kEvNcvDhI56HjtLdUYixyyUUu
      XLxCc3MDSjBOW3OM8YFLzCfyPPTYKYL+StUPXVUp5PMYeoE/+eNv8b//6/+NwQ8ucfDhk5il
      HB+cOUugtoUjR3rue1xLQRfpiFUsUit5nY6of1foqddiWRbpdBrD2F0OS1EUiUQiuN07yxN/
      UwG4XxSWJ3jx3Qm+9pVPb3w2c/ksf/nXf4duWDz71V+6rUn1frPbBcAwDNLp9Ee24+8EwuEw
      Pt/OycaxqQKw09jNAqDrOul0esNbu5sJBoP4/Tvj2Vc9wbuAdRPjTl5M3gv5fB5gRwjBnt8R
      ttNZV3selMG/Tj6fp1wub3c3bhSAyf73GRybv68XmbrwJi++9sHafw5DZ9/g+8+/dmNqEWDq
      4rVt9zbrC94HQe25GdlsFk3TtrUP12WFyOUy/ODbf8noTBJZcSGbebJlm4mBi7i9HqbnVqiN
      RRi+dIFgvIGRi5dQtTx9FwaJNzUjSzB5pY+BwTHKukFtrAaAlekhRmazFJLzyL4wnft7ySfm
      qGttZ+zyJcqlEn0X+6ipbyK3MMrEchl1dZ6yJVHzoQ3YHwfdEois7bMt6RYR7871VjqOs2uc
      SR8HTdPweDyI4vYoIzdcVRAqidIFQWCi7wx/+R+/wcjMCoXlSV578ywArz//fUqWw0vf+UtO
      v3OBqf53eem1cwy9+wrf+tuX0UoZ/tM3/uq6804MDVIsZPmjr/8eRcPhvddfRbPhte9/m9d+
      8h4LIxf5+x++CcDg+fdJZ7J88w//A/qD+fK7LY7jUCgU7lsQ207Gtm0ymcy2qXjXCYDgCnDk
      0D4OnHiUk8cPArDv4U/wta/9LJ6bFAOUXWF+9pf+EU9/4lE0VeNK3yBf/ZVf5ac/+xkigevt
      vUdOfYLPfvkr9LSESF3jABPdfp772j/i2WefRNMqrvwTTz3LZ5/7MnUhCevBUn3vCl3XKRQK
      d274gGAYxrbd7w1WIFmWmZ2aJHmgCYCaWAwASZTIpJJMjw6xlMje9GTt3W08/62/ZvpAI8ns
      9XEp6VSC6ZFBJhdzfDVU3Yt7K+y1rG17jUKhgMfjuXXZ1U3iBhXo8BM/jaswx7tn+oi3dNFU
      V8mNE2k7xIE6mXfPXuahp57ELQoceugkMhCINdLV3sBDP/2zPPfZx2nq2EfIfzWnTbi+nRpX
      mR/96HV+4b/97wi6JQ6dPIkiQO/R47gVAU+olp7uVkLxZjpa6yt9OXkSaWeq6JtGsVh84PX+
      W5HNZrdcFbqvjrCx82/xgx+9hVbI0nr8k/zyP/7Cfenk/WKnO8Isy2JlZeWBM3neC5FIBK93
      6zSE++oI6z75JP+s8xA2IpFI+H6eek+w0yMnt4J1VWirXkz3VQAEQSQcrbmfp9wzWJa1IxxD
      241pmqiqumWzQNUTvEMolUp7/u2/TrFY3LJnUY0F2gHYtk2pVLrh82SuzNBshk8cbmQhVWRi
      KYdLFplYyvGPP7mPF8/N8NC+OC+cmaIh6uN4Vy2NNT6+8aNBfvpEC/saw/zpjwapj/rwumQ+
      81ALgiDwJy8O0hD14pIlnj7SyF/8eJi2eIADLVEs2+bKbBpREPj0yRa+/cYY8XBFJfncw618
      48VB2uuC7GsKUygbzKeKeFwSj+yv47VL87hkkScPNXD68gI/83gnZ0cSLKVL2LbDc4918Dev
      j/Dw/jpaav2MzGd4vLfhhvs2DAPDMHC5XDd8d7+pzgA7AF3XbxruYNuVZGUAlu2gGRaaYSNL
      IvOpIqpmYtkODVEfj/bUURfxMrtS4FhHjKHZShblsN/Fc6faWcmWN0JPgl6FL51qJ5lTsWyH
      aMDNoz11NNf6yRZ1vvhoO4/31uNWJHxumedOdZApaDgOhHwuHu2pozUeYGalwP7mMM8ebyaV
      V3ErEs8eb6Y25KGkWRimzcxKga880Ulva5TBmTRuRWJyKYdh2mjGrb2cW6UOVgVgB3CvP/ZD
      3XEujic3koyvFjRmVgqUdZO+yRT5ssH0ch7DsllKl/nD5y9zoruW9XVlIlPm3z9/meOdMURR
      IFfSmVkpUCwbiKKAbli8dH6WdEEjlVf5oxcuc6i9BkGAfNlgZqVAvmzw3GPtaIbFt34ySndj
      iONdMV48O8PUciXa03YcZLGSZMutSBimhSAIHOmooX8qdfObu+aZbEUM1KYKgG1ZzM/Okkxc
      Ne05jkOpWGR6YgJVVbFtm+XFRWYmJzfehAuzcyQTiT2hE6/n2rkVE0s53hlcwrxmMCiySDzi
      ZTlTERzDtClrJiXNRDUsnjhYz7GuWmZXCjREvfzKpw/QN5namE3qIl7+6ad76Z9eRdVNTKty
      fFk3sR2HtweXAJBFgVjQw69+tpehmTQl7Zq2msnZkQS5oo5bkZheLjA6n0WRxY2dfG5FwuOS
      eeXCLGeGlznYFgWgsyHEXPL2er7jOFuy623TNsQ4jsPZt9/BcRxSySTHH36Y5rZWdE3jh9/7
      PvsOHGBybIxnPvsZJkfHAFhaWKCmthbLNEmnUhx56CSt7e33pT+wM/0Amqaxurp60+8s26FQ
      NhAE8LllLNtBACRJAARU3cTjkiiUK44zj0vCcRw8LhnTsrEdB8t28LpkVN1ElkRkSaSsm2uf
      WUiisFHgwuOScMkiBdVEEgW8LgnVsPAoErppIwoCZd3EccCtVM5V0kx8bhlJFCiuH+eWKWuV
      vgEUygYel4QiSxvX1gwLAXApt94n7PP5CIc315y+qYvgXDZLV89+gpEwE6OjNLe1YloWlmnS
      0tHO8OAgAPGGekavDBGvryOzmqa9q4tITQ2TI6P3VQB2Ird7+0uiQPgaj/qH8yT51wK0rm1z
      te31k7vHdfWn9q79vT5Aw/L1xwe9yg1t3WsDVflQ29A1VWwC1x7nvnq94DVtPny+26Hr+qYn
      MN40FUgQBJ781DOkVpIszM5uZATwer08+omnGB4YoFwqIYoibreHcCRCOrXK4598mvRqivmZ
      GcQdmEXgfrJV0/xuZT1x72ayqWuAbCaDJEkUcnl6jxym//wFsuk02XQax4H6xiaKhQKjQ0Po
      moZpGOSyWURRIp/Lc/Dokc3s3rZzKwEYnkvzZv8CqdytE10VVYOh2TRjC9fHz1xbJzeRKXH6
      8u3P82EWUpVUK1PLORzH4fJUCttxmFrOM7WcQzdv3JDfN5mqlHpdQzMsBqYral22qPHO4NKG
      muU4DmMLWc4MLbOSLfNG3zxv9i9Q1m6Mf3IcZ9MTAGyqChSvq0OWFXqPHMbr86G4XHi8Xjr3
      7UMtq0RjNQiCgMvlwrIsIjWPgeMgS/LGMQ8y62nJP8zofJYnDjbw5uUFHt5fR1E1qIt4GZpN
      c6KrllzJ4PJUCrciUR/1Ylo258eSRAJuXjk/y2ceauFAS5TX+xZ45kgTjuMwupBlJVPmSEcN
      uZLOQqrIw/vjXJlJI0si+5sjnB9boayZNMX8zCQKhP1u3h1apj7i48rMKj0tEQzTZnAmjWHa
      PLwvzqWJJBcmkrTXBcimS7TFg8wni1ycSHKoLcpP+hZ4eH+cN/sX+PwjbSRzKv1TKY51xgj5
      XJzcF+eV87M3qGzrbLY/YFMFQFYU4vVXazMFQ5XdXYqiEFgr5AYQXQu5Xqe2/ub1nB40bvV2
      U3WLtwYWaakNcH40wYnuWk5fXqQ55uftwSUKZYNH9seZTuQZXciymteoi3ipC3tpqvHRXld5
      tk8dauCdK0t0N4aYWSlwqqeOtweXWM2r1Ed8vD24RCqrUjYsskUdv0feWBd0NYY4N5KomFwn
      k8RCHiaXcgQ8CoupIo4Dl6dX0U2beLjiVGtYq87Y1RhicKYyA0iiQFONn4sTSQBSORUBuDie
      JOh1oZsWrfEAinxzAdjsGaDqB9hGbvXj+jwyzz3WwaM9dfg9Cu11QUI+hflUkYaoD8dxuDKb
      xl6bPKIBN1dm0qzkVGyHDTv8xGKOgFehqJpousWF8SQ1QTeKJFLWTOrCXvKqQdCjEPQpjC5k
      N9SlhqiPD8ZWONQWZWg2Q2fD1a2pNUEPXreM1y0xnciTyJTRTIuldMWbPTC9ytRynkuTKbxu
      mRfPzRAPeRlfzNJY40czbEzbQZFFLk2kONFde8/P6H5xnRl0MauhGg/yNjyJztrKW2onmEEL
      hcJGipBr0Q0LRRYRBAHdtFAkEceBsm7iViQcwDQrHmHHqQyksr7WDmfNTFlxPOmmjc8t89L5
      WZ4+3LhhTtUMC69bxjBtbNvB45I2zrH+Ni5p5nWmUMOykUURy3YAB1kSUXULQQCXLGHaNi5Z
      WvMtOEiigNslUV4zleqmjUsWK9dcM6Xqpn1bi5CiKNTW3lpAPi57tkrkThCAXC63Zfk91wVp
      u/0e94osy8Tjt6gtcT/Ov2lnrnJHttLT7dqlxRY2+xlVBeAB5/z773P05EkWZmeQFQWf308y
      kWDfgV6GBwcIBEPE6+pQVXXNF5NidTVF1779GLpOYnmZleUlmlpa12zyDuFIlPTqKi6Xi3h9
      /Xbf4seiKgDbyFaoI9FYDamVlUrgnAOplRUsy0JVyzi2jUBFzVi3ygmigLGWjsXldlMTi1Xq
      f4kClm5SLBaoidVSKha3ZPBv9jOqWoG2ka0QAEVxkU6liESj2I6Ny+WmvbOLVGIFSZZxedxY
      lkUhn68U3SiriKJILpvFMAyWFxepb2wkGAyhuBRC4Qijw0OEI5Etidbc7GdUXQRv46KwVCqR
      zd48xcz9Yt3ZJooitm0jCAKiKGJZFpZl4dg2isuF4zhIkoSh6whiJaJTWDtGkiRs295wShmG
      gWPbyIqy6UUvPB4P0Wh0085fVYG2ka1IB3jtNa4drJIk3XTwKh/yuq63qcRsVZKdbcVOrXU2
      +xlVVaBtRJar7587sdnPqPoLbCOiWLHLb6ap7+K5sxw8eox0KkUhn0OWFURJoq6+nvGRYaKx
      Wmrr6hDX1J752Vl0Qycer2NxYYEDhw4BkEqukM/lcGwHj9dDIZ+npa190+O1NlvFqs4A24gg
      CJv+hovGYqwmk5iGgSQryIoMOMiKgr0Wa2+vrQVESSIUieByuQmGw/gDgY3zxGrjiIJIa0cH
      /kAQVVVvUJc2g81OlXjLpz+9quFzPRjyYVgOTeGt01vvlvVI2M3cEyBJMpqm4vX6ME2Tmlgt
      hmGQTCSIxWppbG7eWPhalkU2k6a1veM640C5XMblcmE7lQWxoig0tbSQy2So2cQwBUmSNn0N
      cEsB8LlE4oGtTVS6WawUdu6mE5fLtanhELF4HNuy8Hg8aJqGYRio5RJ1DQ0szs+zMDdHTSyG
      BAiShCCIJBMJFJeC49hkM2lEsbJgbm5tA6BYKGA7NvG6zfUDuN3u7TODrhQMYm6LnGqhlQqE
      A14sRGZn52nv7L5uy9tOZ6Vg3CDMO8EMChUzZWKPJAC4V7YiT+htR7GZmeGtgcH/8OAAACAA
      SURBVDzTF17nyVMnwB0mJ4QYf+UVvvTczkp8u1sRBAFFUfZEMYx7QRCELakpfFcK1qFjhxns
      GwDA4w0gidW31f1CEIRNecsV8nmmxseYmZokm0kzPzMDwMClS5W0NJMTJJaWWFqYZ25mmvw1
      NQkcx2Gg79LGrJRMJJidnsY0DGanp1laXKCQzzM7Pc3i/P2tJ7eO2+3eGj/Jbb/0Rulurae9
      +yCHThyjrqGB4sok+w8f3/SO7SU2IxuyaRjU1tVjWxa6pqOqZYqFArquVfIxWRbRWAxNVZFl
      GUmWWFleBmBpcQFZvqoyLi0u4DiV9I35bAbbsvEHAsTr6tDUu99vfC9sVTHt26pAciDOwXVL
      WEcHAM0trZvcpb2HKIp4vd6b5gf9qDjA1PgYgWAIQRDwB4Iszs8RjcUIh8OEQiEmxsbw+X3E
      auNIsozP58dxHFZXVlBVlWIhTyAYwufz0djUzNTEOJGaGJZpks2kN1LY3G8kSdoyb/NtF8EP
      khVopy6C1zEMg2Qyed/OVy6VkCSJfC6HJMv418Kgvf5KcoLVZBKv1wcCqOUy4UgUtVzeiPBc
      D6BLJZPIskwum6WxpWUtY18lfkhTK+bV2H3esBIKhfD7/ff1nLfiDgIgc/H9d8mU4elnnmR3
      bqnYHQLgOA6ZTAZ1k1SK3YIoisTj8S0rm3qHqzi4vFG6asJUSzdsLoIgELjG87pXCQQCW1oz
      +A5XEpBQmS9rbM2EtLeRZXnLFn87ke24/zt4swQOHD25NT2pgiAIBIPBjazZe41QKLTlKumD
      EezzACGKIqFQ6M4NHzC8Xu+W7jNYpyoAOxCPx7OlpUK3G0mStuXtD1UB2JEIgkAoFNozG2Yi
      kciWLnyvpSoAOxRRFIlEIjvGTLtZhMPhbVF91rmtANhGmdVMgfn5ecr5DIV8jr5LfRTVSnix
      4zikUrev9VTlo6MoCtFo9IEVgkAgsO2q3m0FwMzM8s7FYf7+u9/iyqWzjA4PUxCCvP7KywCs
      JuZ4/oc/3pKO7lVcLtemlwnaDnw+H4FAYNuF++6iQY8fZbDvMgCS7EKWKp2O1TcTDXg2r3dV
      EAQBj8dDJBLZ7q7cN/x+/7Ytej/MbVdZki/G/vYAbilOjd9HvKmR4bEpeo8+xOX+fupjIXw+
      D6lMgVik6sXcLNaFoKamhnQ6vas3zwQCgR3x5l+nGgy3Q36Iu8UwDNLp9Kbnzd8MwuEwXq93
      Rz3zqhVol6EoCrFYbEt2S90vJEkiFovh8/l21OCHuwiGu3DmbV5//S123/vmwUWSJKLR6I7R
      o2+Hz+ejtrZ2W02dt+MOnhYHt6+Gbp9NGahq+TsHQRDw+/14PB6y2ext6w1vB7IsEwqFdvxM
      dcdgOFnUWChBdR/YzkSSJGpqalBVlUKhsO11h0VRJBAI7Eh152bcUQB6Dp/Ymp5U+Vh4PB7c
      bjeaplEsFrc8y4QkSfj9/l0z8NfZG8Eme4R1c6nH48EwDMrlMuVyedNCq9dTl/h8Plwu164a
      +OtUBeABRVEUFEUhGAxiGAaapm1khvs4SJKE2+3G7Xbjcrm2LYjtflEVgAec9fyjLpeLYDCI
      4ziYpolhGBtFMizLwnGc6xxsoigiiuJGHQFZllEUZdcP+A+zdwXAAdOygN03bX9sBBHF5eZe
      3ZyW7WDZD5ZB/LYCYOtFUgWLUj5DPBLAFCTGxibY33uIoM+NWswyPrVI78EDSOLuGkh+j8x8
      oZqOcK9z+9yg2XnODOSZvfQTTj10DNEbQffU8carP+a5L3+JQlFFLCwwPF/PodbNq+O0Gfhc
      4gOT/r3KR+euRsDBY0e50tcPgCDKyKKAZVnkVuZYleIc3GWDv0qVdW4fDeqvpbcrhEuspy4c
      pKaxmZHxaQ6dfITh4WEcw8EnGuQKKuFqWHSVXciejQatUgXuQgVyHAdrD+aoqbI3uKMAzE8O
      c+7iwFb0pUqVLeeOfoDmti5WS6Nb0ZdtI1M2Mazdu8uqykfnjuHQ0xOjLC0ucqD3MLuoLNg9
      ITgindHqIn4vcsdo0I6ew3T0HN6a3lSpssVUPUFVthEHwzDYzj3+VQFYo//iRYy1XyKXWmJ0
      ah4ch+TiLLOLKxvtVmZGSRZMALRihvnlGxOD6YUk4zMrN3wOgKlxZWTiNj2xmJn+cOE5m5mZ
      2bu6D8uysD/GiLoydOW23zuOzZWh4Zt+p5dyzC7evMpNJQjP2vh7ZnyEublZzt7GwLIyN0Ey
      r2JbBgOXL6Obt7BGWjrT80vrF2J2ehLDujvLZVUA1jj35vOcH1oEHN55933Ovf8eDg4LiVVW
      E4usr5HTS9OkChrlsorLFyKdWMShEmGpqWUM08Iop5ldTFEula8bjJZpUCrmGZ+ew3GcjfYA
      lmVSKpdxHAGXSwbHQVNVNE1f+6yyp9Y0dFRVw3FYi+rUUTWdylUcLr3xY0aXVjFME9M0MQ0d
      y3Yqx2k6jlMZxOVSCcu+2jfHtiiVSoyNj+PYFqZlAw79750mveYqskyDi+fO8Nprb2E6Drqm
      oumV8GrbMhkbnyAaDePYNoZpUrrm/vVihn946VXKqoalF8mUDNLZIk8+egLWCvBtmNsdh1xq
      idde/TFXJuZYTSwgSBJz17yI1u9B1w0cQcClVLR5tZghU7KQpbsb2tK//M3f/K2bfVHSbfyu
      3VoU6XrudC+a4ZAvltFyKbq7OxibmMW2DeqDMmMLOWQrR9H2Uxvxk5obZ2y5SH52gJQTJTEx
      SMv+Lv72L/8zLq+Pd8+ep7ulhnc/GMVFnuHZVTpaGtCLaV569TSCY5LIlpHKKSaX0gxcvEBD
      cxOvv/oatmXi8kU4e+Ztav0Cb5wfwdTL1NTW8fbpN2mK+3n97QuUswmWcgYDZ14nZwhcev8d
      6tr341UEBj44S0F0EQkEefH73+L8hX6isShnPugnvzxFxvYx0f8+ubLOxb5B9nV1IuDwyosv
      YCIyM7dIe8jg3bEyXc0+Xn+7n0eO9eIYBV548VXq6hvQTIsal8754TmSM8PorhrK6SVU0+ZS
      /yAtAZ2/efkCHjvHyFyK9uYGMslFLvQPE4vHSc2OkzMgm5gjUNfC+2++hmpYOIJCMOBl9PIH
      TCzlEI0i7QdPMH75Am5fgKmpabq6OhEEh9OvvUxBs3jrrbfpPdLN2z85T43f5szlSSQ9Td7y
      Eo/eeRf7x5oBTNPEtkxWkg9CflARt+gwM3yBpoMPA9DXP8pTzzzBI48/zeTQpUozQaDn0BGO
      H+wimb5aWzcSb+Tw4cO4pMobr6O7h8OHj1DOZwGYGxuk6/jjHOrtwSVLDAyNoGDhkhymxgeI
      NB/iyNFjRIMVa5Q3GMWFgapbCELlnFMjIxx8+BQPnXqCxakhZJePw0eO0ByPoJoWINLQ0ER3
      zwFqoyF0x8Uv/9P/Gn15Al1UkLw+0svLjI6NY+o6mlrCchzQEhieRo4cPkQkeH2FlmAwiCAI
      LI5cou3Y0xw82ItHkbg4NM2nPnGKU08+wejAJRYXFiiVVZaXE4BA574eDh0+TDmfBiAaq6e5
      uYXu9hbG55M88chJHj3ezeClK6hSgGNHj9BUXwPA6MwyTz3+CJ1tTWCVKJpujh09SlhSyao2
      2CoFzcWJY0eIBK7mFh0eGeORU49x6snHmbwyeFe/+m2tQJnFCQYml5FEmVC0Bi2bwB2uo5xe
      xhBczA31ceSpp7l09iw9h09w8tihu7roTuXRYx38wXfe5Tf+xSOMnYf93U1c6huhTs5R17b/
      Y5073tjE6f4r1Dq1qIZFW2MdvpoG6mtjBMNB3nrvIqstfmRPpTiGYdocPHKUucEPWMruA6C5
      rY1zV66gNPsJx1vRUzeuCyI1ARbml6n3tBCpqUESBRra2hkdTNDd2U3RlCgsj9Pa0U00WoMo
      COCOoqXfIb3ayWq2gNsfopRLMzulo61pJbHmDs6e6aPF3UFJtzjZHefC4AR+fYnmjv2MD5zl
      6Scfo39g5Kb3L8oyhlakUCzREPUxMrNIZnKKrsOPM3DmNKl0GpCIRUPU+GXGZ5dZXFympeU4
      olkgmUqRLkPQLYLoxjayJFdXWUllNq7R0drElaERGjxl6to77+p3uW0skDp1hlVvA8WFAsX8
      OHKgC724ACiAhUtwOPXM07x75iKWWuBzn//CXV10q7lTLFC2ZBNAIxwOkUymiMViZLNZIuEw
      ycQimqPQ3FApBaoW8wguPwo6RUPAMVQC4RD5bJ5wOEQ2myXgd1PSIOBVyBfKhEKVqTidXKZk
      QMDvJxT0MT8zjegJ0lhfi1rIMp9I09HeRrGQJxQKsjA7jegJ0VhX6U84HCa7miBTsmhrbqSQ
      z+IPhlGLeRSvH0USwXGYm5kiGGsAS99IrJtNJVjJlunsaEOwDSYmpyq5XUP+tfvKMZ/IEKsJ
      EwmHWZiZQPBG8LkUwuEgAJlUgrzmEPJ7CYeCJJbmsSQvjXUxCtlVkjmVaMhP0OemaAgEPDL5
      YolQsHJ8Lp0kW7ZpaYyzMDuNOxijNhrE1FWmZuZobu3A65ZxHJvZqUm8wTChcBQZk5GxCTq6
      9uNdc0YV8xkWl1MMDQ/xxS99gXy2SDgcJJVYpGxJNDfW3dVWp9sKgEddQZV9GEUdyzYopBN4
      InWIlgk4BL0Sq6qDS5KwLZ2OjruTuq3mbgSgOVx1hF2LWVxldLnMwa7m7e4KAFeGhjjY27vx
      /9TYFZKZIvUtHbQ21H7k81ajQakKwF7mLqJBKyatKlUeRO4iGnSE8/23d47sdj6O46jK7ubu
      okGHHuxo0N2cb/9+UNnzAabtYNg2ll15KUiCgCIJyJKAJAi7LvHB3XBX0aCJpSW0BzgadC/h
      OA6qaZMsmqyWDFIlk5xqoho22i1CwiUR3JJIwC0R9sjEfDLxgELYI+96oagugoHVgklb1HfL
      73c7juOQ1yym0xqzGY3VksH92P7gU0Tqgy46om4aQ66KGXaXUX2nP8CYtsN0WmU0WSaRN7jf
      il7JsJlcVZlcVXHLAp01Hg7EfYQ90q7JE1oVgAcQw7IZTZa5slyioG/Nfm7NdBhKlBlOlGkO
      uzja6CfuV3a8IFQF4AHCdhwmUip9i0Xy2vakMHSAuazOfFano8bDyWY/wR28eNy5PatyT2RV
      kzMzeRZzOyPdowNMrqrMZTRONAforfNW4o52GLcVAKOU4cLlUTq6e6jxCYwvZOhsCJJRRTKp
      BA2xEFIwjr+aYnDbcByH4ZUy5+cLO3Jjv2E7nJ3NM5NRebI9RMizs965t+1NOTWH4Ylz9t13
      6Kj10b9cJi42cDmhMHbuVY4dOkDj8Wfx1+zMAmgPOrpl8950nslVdbu7ckeW8wY/HFrlqY4w
      rZGdUzfszlUiT7+Mv66dsbkFXPlF5jKVh33gyGGGBy5vQRer3IyibvHKSGZXDP51NNPhJ+MZ
      BpdLO8b5eFs/QJg8q5pCLjmPzx+kvsbP3GIKVyCKiEEhuUBD9zGCnp29c+xB8wNkVZNXRzPb
      ttC9Hxxp8HGyObDt64KqI4zdJQBZ1eTHoxkKu3jwr3OozscjrYFtNZXeORrUttB0A8c2yeby
      G59bpo6mV6NEt5KCZvHqAzL4AQYTJfoWi9uqDt1xST4/NcZCVicsW5iWQaH5EE21PgbOn8UO
      1HLi0IGt6OeeRzNt3pjY3WrPzbi4UMSnSOyPe+/ceBO44wzQ3NaJRxExkdnf00kplye3PMls
      Isvy4vJW9HHPYzsOZ2byJIsP5oz7/myelW0qV3VHK9D0xCgriQSRSJALfRM01AcRgs18/nM/
      xeGD+7aml3uc0WR5V1l77hXTdnhzIod6q8RXm0h1EczOXgRnyiY/HFrdkU6u+82+mIcnO0Jb
      uiiuunB3MOuqz14Y/ADjKZW57NaqQlUB2MGMp1SW8jsjtmcrcIBzc/m7zut5P6gKwA5Ft2wu
      LRS2uxtbTk61GF4pb9n1qgKwQxlLqhS3KJZ/p3FluXTrTND3mdsKQCa5xDtvv83swgqObdHX
      14djm1y4cBHHMunvv4xWSLOcyjE3e3fpu6vcGcOyGVwubnc3to2SYTOW2ppZ4LYCEKltIJ/L
      09oUx7FN3nntx8zNTfLK6Q/ILI5y5r0LlEQv77z8PRZWt27aetCZTmt79u2/zpVE+br07ZvF
      XQVnO7ZJqazR3dPJG6f76WqNMjAwQltziIHBcQSqqUXuF47jMHIPOrBpqYwn/wFJdFMfPIlX
      qWE8+UMk0UXM10vA08xc+jSCINIUfoLV0ghR3z7m02+BINJW8yxL2XM0R54kVRwkU5og7O0g
      7O1kMvUjeup+jpVCPzH/QQRBYjL5I3Qrj0eOEvHtYyXfhyS6aa15htXiEHl1HklUaI48xWTy
      JWTJQ63/MBFf1z09h4JmMZ/TaItsbsa+OwrAkaNHsU2VZLrI0YefpKtQQpFFZFmhsbGOidFh
      Dnz+5ynnVze1o3uFrGqRLBp33d52DCTBRWfsMwwtfZeu+BeRRDf74s8BMJr4e5ojT+CWIxhW
      kZw6g25mifj2E/K0IAoSmfIY8eARkoUBeup/ntHE91EkPwVtkWRhgLw6R42vB0l00VX7Ra4s
      fZvO2s+xkD1DPHgMcFjOnUc1VmmPfRqX5Ec1MrgkP13xL37kZzGeVLdfAJpbKslRO9rWig3U
      X/9994G1Anp3UYygyp2ZyagfKXuDJLpxyUEsWyNTGmNs5XnigWOYtopHiSEKEoZVAqAxfIrZ
      9Jss5c6xv+4rAGhmDr+7AVGQCLgbUc00Nb4e0qVRRPHWG57m0m8CsC/+ZWbTp5lKvoRLDtIQ
      eoRUaRh7xaI+eJKgp+We72kxp6OZNm5582w1tz+z45BKLLG4sIxNJTI0sby8JbrZXsRxHKbT
      2j0fZ9plsuVpTKuELHoJuJtpCj+OzxXH76ojkb9IrjyNQ2VdUdKTxAPHcUkBNKNSwMLnipMp
      T1LQFkmXxvC7GgCoDR4lme+/5bWbI09VBM/REQSRhtAj1AdPAhDytNIUfhyPErvne4LKdsrl
      TfaD3FG0RFFidGQYByhk05QKGa6MTW9qp/YqZcMmW763gDdJ9BD2dlA2kuyv+yqK5CfkbSNd
      GkM1VmmNPoMsetHMHIrkpyH4EF6lhoI2T23gEH53I82RTyAJbvbHf4acOkN3/Dm8rlrigaNE
      vfvorP0cong1lKQp8jgAEW83AXcj++I/g2EWqQueIK/NkylPIIsegu4W0qUxNDNzq+7fkdns
      vb8Q7oU7xgKZapbhqRSHe7vQi1n6hyY4cuwYbmVn7wK7lt0SCzSTVnl9PLvd3dhRhD0SP3M4
      tmk7x+44A6SSOfbt7ySfzjC3sABUCspVuf+s3MPid69Q0CxUY/NMwndcBNe3tALgjkYIRiOb
      1pEqsFq6qv7YtoVWyCMpLhSP95YRkoXVFbzBMA4gKzcuVh3HQS8XEQTxtue5FtsyKeez+EJR
      LNNAECUc20QUK+WLbMtC8Vy/gcW2bUqZFIGa+HXnsW0bSVYwtHKlD+6KVcfUVXS1jOL2IMku
      tFIBtz+AKF6vWVgO5DUL3yZVLN1ZSVr2MPZaAtt1tEKe2YEPkBSFhu7DuP3+jRq/giAiu9zo
      pQKJqREaug9VPveHMLQyueQSkqwQbWqnlEmyMjWK2x+krqsXyzAQRAHF7UUr5itCIUpoxTye
      QAjbMillV8klFvEEQswPXcIXilAu5PAEQvjCNRjlEoFYHbZlIrvcCIJAOZ9ldX4Kl8+P4vZi
      WybTl97DF4kRaWhhfvACjmPTcfIpZMXFwnA/isdHMFZHKZvC0DQc26Ll0EM3PJuMalIf3JzU
      O1UB2CEYlnPDhhDHtnAcGa2YZ3bwA+o69pNenMOxLWpaOsklFtBLBfRyEdPQWBodIFBbh1bI
      4TgOkYYWXL4Almlg2xaldIrk3ASmViba1EE5n8EydBS3B0EQEWWFUjaFJxDCwUGSFRzbwtBU
      ZMWFms8Sa+kkNTtOemkGbzCCoZYr9Y29fhzHRivkUdxeJFmhcf9RsisLFFeTxDt60Ip51HyW
      QE0cl9dPKZNCdrmIte5jcbSfQE3dTZ/NZnrFq8FwOwTDdm6I+/dH43QcfxxPMEyspQtPMIKh
      lVE8PrRiHn+0Fmld7XEAQSAQqcUfrcUTCCOIIpZhUN/VSzmXxTINfKEIkuJGLxcrg9/lQSsV
      1ga8jGPb+MJXzZaiJGPbFqKsVNQhoTJkZJeb+u5DOLaFZRr4a+IICLgDlYqQtmWhFrLo5RKK
      10d2eZ7C6gqKx4uhqXiCYWrb91HKppm9fBZfKIovHL3psynpm7cPujoD7BDMDw1+xesj1tqF
      7HIDApIs4/IFaNx3GMs0CNe3kF6cJt6+H1+4Bsex8UdiFLMpoo1trM5P4dg2Lo+XwmqChn0H
      cWwHtZinrvMA/misorJ4/HhDYdILM4TijQRq4qiFHDVNHQDEO3pwbAvZ5UGPxhBEkdq2ylZY
      QRCobdu3NnOsEmvrrqhVayqQrpZx+wJ4/CHseCOSrCArbtRiDpfHSzGdpPngCXKJBQxNRS3k
      cHn9NzwbfRM3BN3WDKqoKS4PjtK+r5eWhhouXLzEyeNHOXf+Ei11MWSPQsFwI9tlWtvaNq2T
      H5fdYAZNFg3+4crmhpMYWhnHdnB5t9/key80hVx8pufms8PH5bYzQKS2gWLxIq1NcWxT4+zp
      nxCrCfCT9/p4rCtKoL6W0UWLiLyzBWA3sBXBhIp7e1KPfFw2s4jhXa0BHMsgXyjT1dPNm2/1
      09Wybg4V2NcaY3R2ZdM6uFfYzBSBpZU5SsvTOJZJsv8tHMchO9GPUcxRTi1QXJxAz6WwdBXH
      cTBKeYqLE6irSwAUl6YoLU9jqkVKiVly04OYapH87DBaOrFp/V5nM5/NHdcAx04cx7F0ckWd
      4488SU+xjCSLuEWQPW5c/gh+94ORPWI7kaXN+5EFKotSLZvEFYjiWCauYBQ9v4ooyRsLaFtX
      ERU3sjeAtrqIuLbAFiUZ2zRwLAvZF0TPJdGzKQRRxNRKbHauZ2UTn80dBaCxsRGA1ua1xUn8
      xja9B3tv/LDKPeGSBEQBNivOUHJ7MYpZRJcbLZPANnRMtYgrVIO3rrVi5dEruYdsQ8NX30Fp
      ZRbJ7UMJRBAVN6XlGbzxZjzRBixdRfGF0QsfPc7nbtnMaNC72xDjOBSLRQKBAI5tMTczQ7Cm
      jkjoxhV7lY+GLFZq8mrm/ZcAV6gGUXYjuf//9s7st20jiMPfLg+RFHUflm35SJu6R9AizVEU
      SRCg/bP70Jcm6H2gTRs7V5M0PuJTkiWRIiluH5jaTRDEbiLaRuXvTdISWJCa3eHsb2ZshJY8
      cq2SZTjog1L4WyvotouQGtLIoOKYQWcDpz7L0O8hNB1/ew2nMUfQStxdpzHPoLWOVXp57H6U
      OMYxG0BrY5Xf7j7k+tUr+O1lflta5tq1ydQmNY7oUmAbGoNo9OUPtUwS9THc56UsupUsYLrt
      vvC9g24l18hn1/wzxqrsP3er9EJySEqk2VXmwHyAO7f/wK1OUXQTDUcmN8mnF9/hzuKd1CY1
      jgghKJzwPgvHRZr35dWmJQQL73/A+vIjtrdabG5ugop5/OgxE9NnUpvUuFJ2jNdKiDmIsNsi
      7O/i1GdoP/iV7NRZBjtraBkbFSvUMMRwSxjZPABBZ5uwu4NVnsTbWkEaJk59NnGFVx8gNR1n
      Yg5/+ymIdHcCUxO4KQnh4JAuUH16jvr03N7nai19v28cqadUizUOA4Z+j8jvMRx4DAc9UAoz
      X8Vb/wvddpG6gb/9FKs8gZEropTCb61juEWiXhulFJHXRbdchoMecThg6HcRMt1dq2jrmMeW
      EnnKkVK29dRCfrrt4q0/wcxXMNwSVrVJd/keSIlmuwjdwConK3nQ3iIOPMxcGeJ4L0dZCAkq
      BgX9p48TqXXKxRAaKalA/+FUC3SCMHXJhGuMvECslrEx3CIqXkOzssSBn5wJ5EogBEF7A8Mt
      EQw8rPIEw8ADpZC6Qbi7jZ6xiXptpGkRRwHStLCrU4lSNOUw6GT+1ADGimYhM3ID0J1EoelM
      7MtVXoz8AHvvAE59f5zTmH9ujDOx7woLqWHmXy/h/TA4hqSaTfeQ9dQFOmHMlSx0efI6qh8H
      s6VM6vfilTtAa3ONX28tcmbhHM1Gme9/+IlLF8/z7Xc/Mtuoolsmu2EGI/aYm58n9Lvc+n2J
      2tQszcmXHBmfciCWIWkWTB6OKBrkba2gwgCrMpUcXFWnGPp9hoGPkBpRv5NEezafIHUDq9rc
      S5uMvB5x6O+t8pHf3zs8Gw76iUsUBsRRgF2ZQhuh2E4AZyvpi/cOVIN63r4a9JdvblCr5rj5
      023C+SLuRI27qxEFPTGAr2/cYOGjC6jTjeWNeLfujMwAVBRi1Zp4638ReV00K0vU6xBHAXEU
      4s4sIAChGdi1mUQuoZtI02Kws4ZSCjNfSaJC26ugwJ1+m0F7EyEkVrFOd+U+0hitIqjmGpSd
      9D30Q/1T42FAu9PjrYW3+ermLc5MFfZ+W5ircvfROu3tHaQEhODnH39Oa75jQd01qI3I9428
      Lu17v2CVGxjZPFG/A0KAEGQnz9BbeUDY3yVobeBtLKM7ebSMTdDZAiEIe0l6pb+5DEoRPguJ
      hrs7GLkScRQiNB0hR7vonWs4R9Iq6UAT+/jCxxBHeEHM+ctXec/z0TSBKQSaZWLaBXK2hdfv
      8cn1z7n3x20uXr6U+sT/z0gh+HAyy5f33jzCYubKaHU3UX7qJsNwgJkvEXbbBJ0thKYhpIYw
      DCAm6neQuomZK++9KA921smUG6hhhJCrDAMPwy0ihMBvb2DX/nvZw1dRcXSahbQ1pgmnTfI4
      GRlhLxIrxRdLOzztjletIAF8drbITPFoDOBQ+9bG6hOWFpfoDyJUHHH/ziJbrd2DLzzltZFC
      cGkmx7gFhJrFDM1CurH/f3MoAyiUq8R+hyAGv7XM0p+bZDJHY6HjTMXRHLW0gQAAAD9JREFU
      efeYOqgfB4YmuNR0T1Cb1GdqUDSdUFoUbZ1MYZrrV86x+PvtI5ri+CKE4Py0S35MVKIXpt1U
      pc8v42/264mr965OnwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Wind by month' width='192'>
      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
      JfcbAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Wind by year' width='192'>
      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
      1cgxgKSq+f8Ck/mjlQ7DmgAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
